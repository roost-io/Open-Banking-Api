// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=format_216b351002
ROOST_METHOD_SIG_HASH=format_be656da3b0

"""
Scenario 1: Test if the format method returns the correct formatted date string in UTC timezone

Details:
  TestName: testCorrectDateFormatInUTC.
  Description: This test is meant to check if the format method is correctly formatting the provided date in UTC timezone.
Execution:
  Arrange: Initialize a Date object with a specific timestamp. Initialize a StringBuffer and FieldPosition objects.
  Act: Invoke the format method with the initialized Date, StringBuffer and FieldPosition as parameters.
  Assert: Use JUnit assertions to compare the returned formatted date against the expected formatted date string.
Validation:
  The assertion aims to verify that the format method is correctly formatting the date in UTC timezone. The test is significant in ensuring that the date is correctly formatted for further processing or display.

Scenario 2: Test if the format method appends the formatted date to the provided StringBuffer

Details:
  TestName: testAppendingFormattedDateToStringBuffer.
  Description: This test is meant to check if the format method is appending the formatted date to the provided StringBuffer.
Execution:
  Arrange: Initialize a Date object with a specific timestamp. Initialize a StringBuffer with some pre-existing text and FieldPosition objects.
  Act: Invoke the format method with the initialized Date, StringBuffer and FieldPosition as parameters.
  Assert: Use JUnit assertions to compare the returned StringBuffer against the expected StringBuffer which includes the pre-existing text and the formatted date.
Validation:
  The assertion aims to verify that the format method is appending the formatted date to the provided StringBuffer. The test is significant in ensuring that the method is correctly appending to the StringBuffer without overwriting pre-existing content.

Scenario 3: Test if the format method handles null Date object

Details:
  TestName: testNullDateHandling.
  Description: This test is meant to check if the format method is handling a null Date object gracefully.
Execution:
  Arrange: Initialize a Date object as null. Initialize a StringBuffer and FieldPosition objects.
  Act: Invoke the format method with the null Date, StringBuffer and FieldPosition as parameters.
  Assert: Use JUnit assertions to expect a NullPointerException.
Validation:
  The assertion aims to verify that the format method throws a NullPointerException when a null Date is provided. The test is significant in ensuring that the method is robust against null input.

Scenario 4: Test if the format method handles null StringBuffer object

Details:
  TestName: testNullStringBufferHandling.
  Description: This test is meant to check if the format method is handling a null StringBuffer object gracefully.
Execution:
  Arrange: Initialize a Date object with a specific timestamp. Initialize a StringBuffer as null and FieldPosition objects.
  Act: Invoke the format method with the initialized Date, null StringBuffer and FieldPosition as parameters.
  Assert: Use JUnit assertions to expect a NullPointerException.
Validation:
  The assertion aims to verify that the format method throws a NullPointerException when a null StringBuffer is provided. The test is significant in ensuring that the method is robust against null input.
"""
*/

// ********RoostGPT********
package org.openapitools;

import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Rfc3339DateFormatFormatTest {

	private static final long serialVersionUID = 1L;

	private static final TimeZone TIMEZONE_Z = TimeZone.getTimeZone("UTC");

	private final StdDateFormat fmt = new StdDateFormat().withTimeZone(TIMEZONE_Z).withColonInTimeZone(true);

	@Test
	public void testCorrectDateFormatInUTC() {
		Date date = new Date(1633011222000L);
		StringBuffer toAppendTo = new StringBuffer();
		FieldPosition fieldPosition = new FieldPosition(0);
		assertEquals("2021-09-30T14:13:42.000+00:00", fmt.format(date, toAppendTo, fieldPosition).toString());
	}

	@Test
	public void testAppendingFormattedDateToStringBuffer() {
		Date date = new Date(1633011222000L);
		StringBuffer toAppendTo = new StringBuffer("Pre-existing text. ");
		FieldPosition fieldPosition = new FieldPosition(0);
		assertEquals("Pre-existing text. 2021-09-30T14:13:42.000+00:00",
				fmt.format(date, toAppendTo, fieldPosition).toString());
	}

	@Test
	public void testNullDateHandling() {
		Date date = null;
		StringBuffer toAppendTo = new StringBuffer();
		FieldPosition fieldPosition = new FieldPosition(0);
		assertThrows(NullPointerException.class, () -> fmt.format(date, toAppendTo, fieldPosition));
	}

	@Test
	public void testNullStringBufferHandling() {
		Date date = new Date(1633011222000L);
		StringBuffer toAppendTo = null;
		FieldPosition fieldPosition = new FieldPosition(0);
		assertThrows(NullPointerException.class, () -> fmt.format(date, toAppendTo, fieldPosition));
	}

}
