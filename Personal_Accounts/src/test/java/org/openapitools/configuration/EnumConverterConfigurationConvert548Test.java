// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=convert_4efe4e60ab
ROOST_METHOD_SIG_HASH=convert_0f9799d4be

"""
Scenario 1: Test for Valid BalanceTypeCode Conversion

Details:
  TestName: testValidBalanceTypeCodeConversion
  Description: This test is meant to check if the convert method can successfully convert a valid string representation of a BalanceTypeCode into the corresponding BalanceTypeCode object.
  Execution:
    Arrange: Create a valid string representation of a BalanceTypeCode.
    Act: Invoke the convert method with the valid string as the parameter.
    Assert: Use JUnit assertions to compare the actual result against the expected BalanceTypeCode object.
  Validation:
    The assertion verifies that the convert method can accurately convert a valid string representation of a BalanceTypeCode into the corresponding BalanceTypeCode object. This is crucial for ensuring that the system correctly recognizes and handles BalanceTypeCodes.

Scenario 2: Test for Invalid BalanceTypeCode Conversion

Details:
  TestName: testInvalidBalanceTypeCodeConversion
  Description: This test is meant to check how the convert method handles an invalid string representation of a BalanceTypeCode.
  Execution:
    Arrange: Create an invalid string representation of a BalanceTypeCode.
    Act: Invoke the convert method with the invalid string as the parameter.
    Assert: Use JUnit assertions to expect an exception to be thrown.
  Validation:
    The assertion verifies that the convert method throws an exception when given an invalid string representation of a BalanceTypeCode. This is important for ensuring that the system can robustly handle erroneous inputs.

Scenario 3: Test for Null BalanceTypeCode Conversion

Details:
  TestName: testNullBalanceTypeCodeConversion
  Description: This test is meant to check how the convert method handles a null input.
  Execution:
    Arrange: Set the input as null.
    Act: Invoke the convert method with the null as the parameter.
    Assert: Use JUnit assertions to expect an exception to be thrown.
  Validation:
    The assertion verifies that the convert method throws an exception when given a null input. This is important for ensuring that the system can robustly handle null inputs.
"""
*/

// ********RoostGPT********
package org.openapitools.configuration;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.openapitools.model.BalanceTypeCode;
import org.openapitools.model.AccountStatus;
import org.openapitools.model.AccountSubTypeCode;
import org.openapitools.model.AccountTypeCode;
import org.openapitools.model.ConsentStatusCode;
import org.openapitools.model.CreditDebitCode;
import org.openapitools.model.ExternalPermissionCode;
import org.openapitools.model.ParamName;
import org.openapitools.model.Status;
import org.openapitools.model.SupportedAlgorithms;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;

public class EnumConverterConfigurationConvert548Test {

	@Test
	public void testValidBalanceTypeCodeConversion() {
		// Arrange
		String validBalanceTypeCodeString = "InterimBooked";
		BalanceTypeCode expectedBalanceTypeCode = BalanceTypeCode.fromValue(validBalanceTypeCodeString);
		// Act
		BalanceTypeCode actualBalanceTypeCode = convert(validBalanceTypeCodeString);
		// Assert
		assertEquals(expectedBalanceTypeCode, actualBalanceTypeCode);
	}

	@Test
	public void testInvalidBalanceTypeCodeConversion() {
		// Arrange
		String invalidBalanceTypeCodeString = "InvalidCode";
		// Act and Assert
		assertThrows(IllegalArgumentException.class, () -> convert(invalidBalanceTypeCodeString));
	}

	@Test
	public void testNullBalanceTypeCodeConversion() {
		// Arrange
		String nullBalanceTypeCodeString = null;
		// Act and Assert
		assertThrows(NullPointerException.class, () -> convert(nullBalanceTypeCodeString));
	}

	public BalanceTypeCode convert(String source) {
		return BalanceTypeCode.fromValue(source);
	}

}
