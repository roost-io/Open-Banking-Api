// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=convert_162e325e71
ROOST_METHOD_SIG_HASH=convert_6cf723d9e1

"""
  Scenario 1: Valid String Conversion Test

  Details:
    TestName: testValidStringConversion.
    Description: This test is meant to check that the convert method correctly converts a valid string to a ParamName object.
  Execution:
    Arrange: Create a valid string that corresponds to a ParamName object.
    Act: Invoke the convert method with the string as a parameter.
    Assert: Assert that the returned ParamName object is not null and equals the expected ParamName object.
  Validation:
    The assertion verifies that the convert method correctly converts a valid string to a ParamName object. This is essential as the application needs to accurately interpret and handle ParamName objects based on string inputs.

  Scenario 2: Invalid String Conversion Test

  Details:
    TestName: testInvalidStringConversion.
    Description: This test is meant to check that the convert method correctly handles an invalid string that does not correspond to a ParamName object.
  Execution:
    Arrange: Create an invalid string that does not correspond to a ParamName object.
    Act: Invoke the convert method with the string as a parameter.
    Assert: Assert that the returned ParamName object is null or throws an appropriate exception.
  Validation:
    The assertion verifies that the convert method correctly handles invalid strings. This is critical as the application needs to handle invalid inputs gracefully and prevent crashes or unexpected behavior.

  Scenario 3: Null String Conversion Test

  Details:
    TestName: testNullStringConversion.
    Description: This test is meant to check that the convert method correctly handles a null string.
  Execution:
    Arrange: Set the string parameter to null.
    Act: Invoke the convert method with the null string as a parameter.
    Assert: Assert that the returned ParamName object is null or throws an appropriate exception.
  Validation:
    The assertion verifies that the convert method correctly handles null strings. This is crucial for ensuring the robustness of the application, as null inputs can often lead to NullPointerExceptions if not handled correctly.
"""
*/

// ********RoostGPT********
package org.openapitools.configuration;

import org.junit.jupiter.api.Test;
import org.openapitools.model.ParamName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.openapitools.model.AccountStatus;
import org.openapitools.model.AccountSubTypeCode;
import org.openapitools.model.AccountTypeCode;
import org.openapitools.model.BalanceTypeCode;
import org.openapitools.model.ConsentStatusCode;
import org.openapitools.model.CreditDebitCode;
import org.openapitools.model.ExternalPermissionCode;
import org.openapitools.model.Status;
import org.openapitools.model.SupportedAlgorithms;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;

public class EnumConverterConfigurationConvert20Test {

	@Test
	public void testValidStringConversion() {
		String validString = "VALID_PARAM_NAME"; // TODO: Change this to a valid string
													// that corresponds to a ParamName
													// object.
		ParamName expectedParamName = ParamName.fromValue(validString);
		ParamName actualParamName = convert(validString);
		assertEquals(expectedParamName, actualParamName,
				"The converted ParamName does not match the expected ParamName.");
	}

	@Test
	public void testInvalidStringConversion() {
		String invalidString = "INVALID_PARAM_NAME"; // TODO: Change this to an invalid
														// string that does not correspond
														// to a ParamName object.
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			ParamName actualParamName = convert(invalidString);
		});
		String expectedMessage = "No enum constant org.openapitools.model.ParamName.INVALID_PARAM_NAME";
		String actualMessage = exception.getMessage();
		assertEquals(expectedMessage, actualMessage, "The exception message does not match the expected message.");
	}

	@Test
	public void testNullStringConversion() {
		String nullString = null;
		ParamName actualParamName = convert(nullString);
		assertNull(actualParamName, "The converted ParamName is not null for a null string input.");
	}

	private ParamName convert(String source) {
		return ParamName.fromValue(source);
	}

}
