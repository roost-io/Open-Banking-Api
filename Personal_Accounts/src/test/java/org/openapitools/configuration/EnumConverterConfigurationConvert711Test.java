// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=convert_4983c52ab6
ROOST_METHOD_SIG_HASH=convert_f6e2405375

"""
Scenario 1: Test Conversion of Valid Account Sub Type Code

Details:
    TestName: testConversionOfValidAccountSubTypeCode
    Description: This test is designed to verify that the convert method correctly converts a valid string to an AccountSubTypeCode.
  Execution:
    Arrange: Set up a string variable containing a valid account sub type code.
    Act: Invoke the convert method with the valid string as the parameter.
    Assert: Use JUnit assertions to compare the returned AccountSubTypeCode with the expected AccountSubTypeCode.
  Validation:
    The assertion aims to verify that the convert method correctly converts a valid string to an AccountSubTypeCode. This is important for ensuring the method can handle valid inputs correctly.

Scenario 2: Test Conversion of Invalid Account Sub Type Code

Details:
    TestName: testConversionOfInvalidAccountSubTypeCode
    Description: This test is designed to verify that the convert method handles an invalid string input correctly.
  Execution:
    Arrange: Set up a string variable containing an invalid account sub type code.
    Act: Invoke the convert method with the invalid string as the parameter.
    Assert: Use JUnit assertions to check if an appropriate exception is thrown.
  Validation:
    The assertion aims to verify that the convert method correctly handles invalid inputs by throwing an exception. This is important for ensuring the method can handle error scenarios correctly.

Scenario 3: Test Conversion of Null Account Sub Type Code

Details:
    TestName: testConversionOfNullAccountSubTypeCode
    Description: This test is designed to verify that the convert method handles a null input correctly.
  Execution:
    Arrange: Set up a string variable as null.
    Act: Invoke the convert method with the null string as the parameter.
    Assert: Use JUnit assertions to check if an appropriate exception is thrown.
  Validation:
    The assertion aims to verify that the convert method correctly handles null inputs by throwing an exception. This is important for ensuring the method can handle null scenarios correctly.
"""
*/

// ********RoostGPT********
package org.openapitools.configuration;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.openapitools.model.AccountSubTypeCode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.openapitools.model.AccountStatus;
import org.openapitools.model.AccountTypeCode;
import org.openapitools.model.BalanceTypeCode;
import org.openapitools.model.ConsentStatusCode;
import org.openapitools.model.CreditDebitCode;
import org.openapitools.model.ExternalPermissionCode;
import org.openapitools.model.ParamName;
import org.openapitools.model.Status;
import org.openapitools.model.SupportedAlgorithms;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;

public class EnumConverterConfigurationConvert711Test {

	@Test
	@DisplayName("Test Conversion of Valid Account Sub Type Code")
	public void testConversionOfValidAccountSubTypeCode() {
		String validAccountSubTypeCode = "validCode"; // TODO: replace with a valid
														// account sub type code
		AccountSubTypeCode expected = AccountSubTypeCode.fromValue(validAccountSubTypeCode);
		assertEquals(expected, convert(validAccountSubTypeCode));
	}

	@Test
	@DisplayName("Test Conversion of Invalid Account Sub Type Code")
	public void testConversionOfInvalidAccountSubTypeCode() {
		String invalidAccountSubTypeCode = "invalidCode"; // TODO: replace with an invalid
															// account sub type code
		assertThrows(IllegalArgumentException.class, () -> convert(invalidAccountSubTypeCode));
	}

	@Test
	@DisplayName("Test Conversion of Null Account Sub Type Code")
	public void testConversionOfNullAccountSubTypeCode() {
		String nullAccountSubTypeCode = null;
		assertThrows(NullPointerException.class, () -> convert(nullAccountSubTypeCode));
	}

	// Method to be tested
	public AccountSubTypeCode convert(String source) {
		return AccountSubTypeCode.fromValue(source);
	}

}
