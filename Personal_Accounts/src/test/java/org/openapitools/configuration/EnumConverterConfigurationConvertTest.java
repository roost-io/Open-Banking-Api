// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=convert_5c0e8c60a8
ROOST_METHOD_SIG_HASH=convert_9715eaedca

"""
  Scenario 1: Valid Account Status Conversion

  Details:
    TestName: testValidAccountStatusConversion
    Description: This test is meant to check the conversion of a valid account status string to an AccountStatus object.
  Execution:
    Arrange: Set up a valid account status string.
    Act: Invoke the convert method with the valid account status string.
    Assert: Use JUnit assertions to check if the returned AccountStatus object matches the expected AccountStatus object.
  Validation:
    The assertion aims to verify if the convert method correctly converts a valid account status string to an AccountStatus object. The expected result is based on the definition of the AccountStatus.fromValue() method. This test is significant in ensuring that the application correctly identifies and handles valid account statuses.

  Scenario 2: Invalid Account Status Conversion

  Details:
    TestName: testInvalidAccountStatusConversion
    Description: This test is meant to check the conversion of an invalid account status string to an AccountStatus object.
  Execution:
    Arrange: Set up an invalid account status string.
    Act: Invoke the convert method with the invalid account status string.
    Assert: Use JUnit assertions to check if the returned AccountStatus object is null or throws an exception.
  Validation:
    The assertion aims to verify if the convert method correctly handles an invalid account status string. The expected result is based on the definition of the AccountStatus.fromValue() method. This test is significant in ensuring that the application correctly identifies and handles invalid account statuses.

  Scenario 3: Null Account Status Conversion

  Details:
    TestName: testNullAccountStatusConversion
    Description: This test is meant to check the conversion of a null account status string to an AccountStatus object.
  Execution:
    Arrange: Set up a null account status string.
    Act: Invoke the convert method with the null account status string.
    Assert: Use JUnit assertions to check if the returned AccountStatus object is null or throws an exception.
  Validation:
    The assertion aims to verify if the convert method correctly handles a null account status string. The expected result is based on the definition of the AccountStatus.fromValue() method. This test is significant in ensuring that the application correctly identifies and handles null account statuses.
"""
*/

// ********RoostGPT********
package org.openapitools.configuration;

import org.junit.jupiter.api.Test;
import org.openapitools.model.AccountStatus;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.openapitools.model.AccountSubTypeCode;
import org.openapitools.model.AccountTypeCode;
import org.openapitools.model.BalanceTypeCode;
import org.openapitools.model.ConsentStatusCode;
import org.openapitools.model.CreditDebitCode;
import org.openapitools.model.ExternalPermissionCode;
import org.openapitools.model.ParamName;
import org.openapitools.model.Status;
import org.openapitools.model.SupportedAlgorithms;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;

public class EnumConverterConfigurationConvertTest {

	@Test
	public void testValidAccountStatusConversion() {
		String validAccountStatusString = "Enabled";
		AccountStatus expectedAccountStatus = AccountStatus.ENABLED;

		AccountStatus actualAccountStatus = convert(validAccountStatusString);

		assertEquals(expectedAccountStatus, actualAccountStatus);
	}

	@Test
	public void testInvalidAccountStatusConversion() {
		String invalidAccountStatusString = "Invalid";

		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			AccountStatus actualAccountStatus = convert(invalidAccountStatusString);
		});
		String expectedMessage = "No enum constant org.openapitools.model.AccountStatus.Invalid";
		String actualMessage = exception.getMessage();
		assertTrue(actualMessage.contains(expectedMessage));
	}

	@Test
	public void testNullAccountStatusConversion() {
		String nullAccountStatusString = null;

		AccountStatus actualAccountStatus = convert(nullAccountStatusString);

		assertNull(actualAccountStatus);
	}

	public AccountStatus convert(String source) {
		if (source == null || source.isEmpty()) {
			return null;
		}
		try {
			return AccountStatus.valueOf(source.toUpperCase());
		}
		catch (IllegalArgumentException e) {
			throw new IllegalArgumentException("No enum constant org.openapitools.model.AccountStatus." + source, e);
		}
	}

}
