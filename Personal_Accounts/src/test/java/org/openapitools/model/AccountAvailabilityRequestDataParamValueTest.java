// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=paramValue_204348948b
ROOST_METHOD_SIG_HASH=paramValue_6cd4bb869d

"""
  Scenario 1: Test for Normal Input

  Details:
    TestName: testParamValueForNormalInput
    Description: This test is meant to check the functionality of the paramValue method when it is given a normal, valid string input.
  Execution:
    Arrange: We will need a valid string to use as input.
    Act: Invoke the paramValue method with a valid string.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome, which is an instance of AccountAvailabilityRequestData with the paramValue set to the input string.
  Validation:
    This test verifies that the paramValue method correctly sets the paramValue field in the AccountAvailabilityRequestData instance and returns the instance. This is an important functionality as it allows for the setting of parameters in the AccountAvailabilityRequestData instance.

  Scenario 2: Test for Empty String Input

  Details:
    TestName: testParamValueForEmptyInput
    Description: This test is meant to check the functionality of the paramValue method when it is given an empty string as input.
  Execution:
    Arrange: We will need an empty string to use as input.
    Act: Invoke the paramValue method with an empty string.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome, which is an instance of AccountAvailabilityRequestData with the paramValue set to the empty string.
  Validation:
    This test verifies that the paramValue method correctly handles empty strings as inputs and sets the paramValue field in the AccountAvailabilityRequestData instance to an empty string. This is an important functionality as it ensures that the method can handle a variety of string inputs.

  Scenario 3: Test for Null Input

  Details:
    TestName: testParamValueForNullInput
    Description: This test is meant to check the functionality of the paramValue method when it is given a null input.
  Execution:
    Arrange: We will need a null value to use as input.
    Act: Invoke the paramValue method with a null value.
    Assert: Use JUnit assertions to check if a NullPointerException is thrown.
  Validation:
    This test verifies that the paramValue method correctly handles null inputs by throwing a NullPointerException. This is an important functionality as it ensures that the method does not accept invalid (null) inputs.
"""
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.ParamName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class AccountAvailabilityRequestDataParamValueTest {

	@Test
	public void testParamValueForNormalInput() {
		// Arrange
		String input = "testInput";
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		// Act
		AccountAvailabilityRequestData result = requestData.paramValue(input);
		// Assert
		assertEquals(input, result.getParamValue());
	}

	@Test
	public void testParamValueForEmptyInput() {
		// Arrange
		String input = "";
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		// Act
		AccountAvailabilityRequestData result = requestData.paramValue(input);
		// Assert
		assertEquals(input, result.getParamValue());
	}

	@Test
	public void testParamValueForNullInput() {
		// Arrange
		String input = null;
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		// Act and Assert
		assertThrows(NullPointerException.class, () -> requestData.paramValue(input));
	}

}
