// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=status_6c6ac061ac
ROOST_METHOD_SIG_HASH=status_8c6ce49481

"""
  Scenario 1: Test to check if the method sets the status correctly.

  Details:
    TestName: testStatusSetter.
    Description: This test is meant to check if the status() method correctly sets the status of an AccountAvailabilityResponseData object.
  Execution:
    Arrange: Create an AccountAvailabilityResponseData object and a StatusEnum object.
    Act: Invoke the status() method on the AccountAvailabilityResponseData object, passing the StatusEnum object as a parameter.
    Assert: Use JUnit assertions to check if the status of the AccountAvailabilityResponseData object is the same as the StatusEnum object.
  Validation:
    The assertion aims to verify that the status() method correctly sets the status of the AccountAvailabilityResponseData object.
    This test is significant in ensuring the status() method works correctly, which is crucial for the application's functionality.

  Scenario 2: Test to check if the method returns the correct AccountAvailabilityResponseData object.

  Details:
    TestName: testStatusMethodReturn.
    Description: This test is meant to check if the status() method correctly returns the AccountAvailabilityResponseData object it was invoked on.
  Execution:
    Arrange: Create an AccountAvailabilityResponseData object and a StatusEnum object.
    Act: Invoke the status() method on the AccountAvailabilityResponseData object, passing the StatusEnum object as a parameter.
    Assert: Use JUnit assertions to check if the AccountAvailabilityResponseData object returned by the method is the same as the one it was invoked on.
  Validation:
    The assertion aims to verify that the status() method returns the correct AccountAvailabilityResponseData object.
    This test is significant in ensuring the status() method works correctly, which is crucial for the application's functionality.

  Scenario 3: Test to check if the method handles null input correctly.

  Details:
    TestName: testStatusMethodWithNullInput.
    Description: This test is meant to check if the status() method can handle null input without throwing an exception.
  Execution:
    Arrange: Create an AccountAvailabilityResponseData object.
    Act: Invoke the status() method on the AccountAvailabilityResponseData object, passing null as a parameter.
    Assert: Use JUnit assertions to check if the status of the AccountAvailabilityResponseData object is null.
  Validation:
    The assertion aims to verify that the status() method can handle null input without throwing an exception.
    This test is significant in ensuring the application's robustness and error handling capabilities.
"""
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.ParamName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class AccountAvailabilityResponseDataStatusTest {

	@Test
	void testStatusSetter() {
		AccountAvailabilityResponseData responseData = new AccountAvailabilityResponseData();
		StatusEnum status = StatusEnum.ACTIVE;
		responseData.status(status);
		assertEquals(status, responseData.getStatus(), "The status should be set correctly");
	}

	@Test
	void testStatusMethodReturn() {
		AccountAvailabilityResponseData responseData = new AccountAvailabilityResponseData();
		StatusEnum status = StatusEnum.ACTIVE;
		AccountAvailabilityResponseData result = responseData.status(status);
		assertSame(responseData, result, "The method should return the same object it was invoked on");
	}

	@Test
	void testStatusMethodWithNullInput() {
		AccountAvailabilityResponseData responseData = new AccountAvailabilityResponseData();
		responseData.status(null);
		assertNull(responseData.getStatus(), "The status should be null");
	}

}
