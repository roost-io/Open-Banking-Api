// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=setParamName_baa0391edd
ROOST_METHOD_SIG_HASH=setParamName_d2502228af

"""
Scenario 1: Test to set valid ParamName

Details:
  TestName: testSetValidParamName.
  Description: This test is meant to check the functionality of the method setParamName when a valid ParamName is provided.
Execution:
  Arrange: A valid ParamName object needs to be created.
  Act: Invoke the setParamName method with the created ParamName object.
  Assert: Use JUnit assertions to check if the paramName field of the object is set correctly.
Validation:
  This assertion verifies that the paramName field of the object is set correctly when a valid ParamName object is provided. This test is significant as it ensures the basic functionality of the setParamName method.

Scenario 2: Test to set null as ParamName

Details:
  TestName: testSetNullParamName.
  Description: This test is meant to check the functionality of the method setParamName when null is provided as ParamName.
Execution:
  Arrange: No arrangement needed as we are passing null.
  Act: Invoke the setParamName method with null.
  Assert: Use JUnit assertions to check if the paramName field of the object is null.
Validation:
  This assertion verifies that the paramName field of the object is set to null when null is provided as ParamName. This test is important as it checks the method's behavior with null inputs.

Scenario 3: Test to set ParamName when it's already set

Details:
  TestName: testSetParamNameWhenAlreadySet.
  Description: This test is meant to check the functionality of the method setParamName when the paramName is already set.
Execution:
  Arrange: A valid ParamName object needs to be created and set as paramName using setParamName method.
  Act: Invoke the setParamName method again with a different ParamName object.
  Assert: Use JUnit assertions to check if the paramName field of the object is updated correctly.
Validation:
  This assertion verifies that the paramName field of the object is updated correctly when a different ParamName is provided after it's already set. This test is significant as it ensures the method is working correctly even when the paramName is already set.

Scenario 4: Test to set the same ParamName multiple times

Details:
  TestName: testSetSameParamNameMultipleTimes.
  Description: This test is meant to check the functionality of the method setParamName when the same ParamName is set multiple times.
Execution:
  Arrange: A valid ParamName object needs to be created.
  Act: Invoke the setParamName method multiple times with the same ParamName object.
  Assert: Use JUnit assertions to check if the paramName field of the object remains unchanged.
Validation:
  This assertion verifies that the paramName field of the object remains unchanged when the same ParamName is set multiple times. This test is significant as it ensures the method's idempotency.
"""
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.ParamName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class AccountAvailabilityRequestDataSetParamNameTest {

	private AccountAvailabilityRequestData accountAvailabilityRequestData;

	@BeforeEach
	public void setUp() {
		accountAvailabilityRequestData = new AccountAvailabilityRequestData();
	}

	@Test
	public void testSetValidParamName() {
		ParamName validParamName = ParamName.values()[0]; // assuming ParamName is an Enum
															// and it has atleast one
															// value
		accountAvailabilityRequestData.setParamName(validParamName);
		assertEquals(validParamName, accountAvailabilityRequestData.getParamName());
	}

	@Test
	public void testSetNullParamName() {
		accountAvailabilityRequestData.setParamName(null);
		assertNull(accountAvailabilityRequestData.getParamName());
	}

	@Test
	public void testSetParamNameWhenAlreadySet() {
		ParamName initialParamName = ParamName.values()[0];
		accountAvailabilityRequestData.setParamName(initialParamName);
		ParamName newParamName = ParamName.values()[1]; // assuming ParamName Enum has
														// more than one value
		accountAvailabilityRequestData.setParamName(newParamName);
		assertEquals(newParamName, accountAvailabilityRequestData.getParamName());
	}

	@Test
	public void testSetSameParamNameMultipleTimes() {
		ParamName sameParamName = ParamName.values()[0];
		accountAvailabilityRequestData.setParamName(sameParamName);
		accountAvailabilityRequestData.setParamName(sameParamName);
		assertEquals(sameParamName, accountAvailabilityRequestData.getParamName());
	}

}
