// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=paramName_a97f9b9adb
ROOST_METHOD_SIG_HASH=paramName_730211c1e9

"""
  Scenario 1: Test paramName method with valid ParamName input

  Details:
    TestName: testParamNameWithValidInput.
    Description: This test is meant to check the paramName method when a valid ParamName object is passed as an argument. The test aims to check if the method behaves as expected and returns an AccountAvailabilityRequestData object with the paramName field set appropriately.
  Execution:
    Arrange: Create a valid ParamName object.
    Act: Invoke the paramName method with the created ParamName object.
    Assert: Use JUnit assertions to check if the returned AccountAvailabilityRequestData object's paramName field is set as expected.
  Validation:
    The assertion verifies that the paramName method correctly sets the paramName field of the AccountAvailabilityRequestData object. This is crucial for the correct functioning of the application as this method is used to set the parameters for account availability requests.

  Scenario 2: Test paramName method with null ParamName input

  Details:
    TestName: testParamNameWithNullInput.
    Description: This test is meant to check the paramName method when a null ParamName object is passed as an argument. The test aims to check if the method behaves as expected and returns an AccountAvailabilityRequestData object with the paramName field set to null.
  Execution:
    Arrange: No setup required as we are passing null.
    Act: Invoke the paramName method with null.
    Assert: Use JUnit assertions to check if the returned AccountAvailabilityRequestData object's paramName field is set to null.
  Validation:
    The assertion verifies that the paramName method correctly handles null inputs and sets the paramName field of the AccountAvailabilityRequestData object to null. This is important for error handling and preventing unexpected NullPointerExceptions.

  Scenario 3: Test paramName method with different ParamName inputs

  Details:
    TestName: testParamNameWithDifferentInputs.
    Description: This test is meant to check the paramName method with different ParamName objects. The test aims to check if the method behaves as expected and returns an AccountAvailabilityRequestData object with the paramName field set appropriately for each input.
  Execution:
    Arrange: Create different ParamName objects.
    Act: Invoke the paramName method with each created ParamName object.
    Assert: Use JUnit assertions to check if the returned AccountAvailabilityRequestData object's paramName field is set as expected for each input.
  Validation:
    The assertion verifies that the paramName method correctly sets the paramName field of the AccountAvailabilityRequestData object for different inputs. This is crucial for the correct functioning of the application as this method is used to set the parameters for account availability requests with varying parameters.
"""
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.ParamName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class AccountAvailabilityRequestDataParamNameTest {

	private AccountAvailabilityRequestData accountAvailabilityRequestData;

	@BeforeEach
	public void setup() {
		accountAvailabilityRequestData = new AccountAvailabilityRequestData();
	}

	@Test
	public void testParamNameWithValidInput() {
		// Enum types cannot be instantiated. Use a valid enum value instead.
		ParamName paramName = ParamName.VALUE1; // replace VALUE1 with a valid enum value
		AccountAvailabilityRequestData result = accountAvailabilityRequestData.paramName(paramName);
		assertEquals(paramName, result.getParamName(), "The paramName field should match the input value");
	}

	@Test
	public void testParamNameWithNullInput() {
		AccountAvailabilityRequestData result = accountAvailabilityRequestData.paramName(null);
		assertNull(result.getParamName(), "The paramName field should be null when input is null");
	}

	@Test
	public void testParamNameWithDifferentInputs() {
		// Enum types cannot be instantiated. Use a valid enum value instead.
		ParamName paramName1 = ParamName.VALUE2; // replace VALUE2 with a valid enum value
		AccountAvailabilityRequestData result1 = accountAvailabilityRequestData.paramName(paramName1);
		assertEquals(paramName1, result1.getParamName(), "The paramName field should match the input value");
		ParamName paramName2 = ParamName.VALUE3; // replace VALUE3 with another valid enum
													// value
		AccountAvailabilityRequestData result2 = accountAvailabilityRequestData.paramName(paramName2);
		assertEquals(paramName2, result2.getParamName(), "The paramName field should match the input value");
	}

}
