// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=hashCode_4522579b29
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

"""
Scenario 1: Validate hashCode when paramName and paramValue are null

Details:
  TestName: testHashCodeWhenBothParamsAreNull
  Description: This test is meant to check the hashCode method when both paramName and paramValue are null.
Execution:
  Arrange: Set paramName and paramValue to null.
  Act: Invoke the hashCode method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome, which should be 0.
Validation:
  The assertion aims to verify that the hashCode method handles null values correctly. The expected result is 0 because the hash of two null values is 0.

Scenario 2: Validate hashCode when paramName is null and paramValue is not null

Details:
  TestName: testHashCodeWhenParamNameIsNull
  Description: This test is meant to check the hashCode method when paramName is null and paramValue is not null.
Execution:
  Arrange: Set paramName to null and paramValue to a non-null value.
  Act: Invoke the hashCode method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  The assertion aims to verify that the hashCode method handles null values correctly. The expected result is the hash of the non-null paramValue.

Scenario 3: Validate hashCode when paramName is not null and paramValue is null

Details:
  TestName: testHashCodeWhenParamValueIsNull
  Description: This test is meant to check the hashCode method when paramName is not null and paramValue is null.
Execution:
  Arrange: Set paramName to a non-null value and paramValue to null.
  Act: Invoke the hashCode method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  The assertion aims to verify that the hashCode method handles null values correctly. The expected result is the hash of the non-null paramName.

Scenario 4: Validate hashCode when paramName and paramValue are not null

Details:
  TestName: testHashCodeWhenBothParamsAreNotNull
  Description: This test is meant to check the hashCode method when both paramName and paramValue are not null.
Execution:
  Arrange: Set paramName and paramValue to non-null values.
  Act: Invoke the hashCode method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  The assertion aims to verify that the hashCode method returns the correct result. The expected result is the hash of both paramName and paramValue.
"""
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.ParamName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class AccountAvailabilityRequestDataHashCodeTest {

	@Test
	public void testHashCodeWhenBothParamsAreNull() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		requestData.setParamName(null);
		requestData.setParamValue(null);
		int actual = requestData.hashCode();
		int expected = Objects.hash(null, null);
		assertEquals(expected, actual);
	}

	@Test
	public void testHashCodeWhenParamNameIsNull() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		requestData.setParamName(null);
		requestData.setParamValue("TestValue");
		int actual = requestData.hashCode();
		int expected = Objects.hash(null, "TestValue");
		assertEquals(expected, actual);
	}

	@Test
	public void testHashCodeWhenParamValueIsNull() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		requestData.setParamName(ParamName.valueOf("NAME"));
		requestData.setParamValue(null);
		int actual = requestData.hashCode();
		int expected = Objects.hash(ParamName.valueOf("NAME"), null);
		assertEquals(expected, actual);
	}

	@Test
	public void testHashCodeWhenBothParamsAreNotNull() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		requestData.setParamName(ParamName.valueOf("NAME"));
		requestData.setParamValue("TestValue");
		int actual = requestData.hashCode();
		int expected = Objects.hash(ParamName.valueOf("NAME"), "TestValue");
		assertEquals(expected, actual);
	}

}
