// ********RoostGPT********
/*
Test generated by RoostGPT for test demo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=toString_df36be246b
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
Scenario 1: Test to check if the method returns a correct string when the parameters are null
Details:
  TestName: testToStringWithNullParameters
  Description: This test is meant to check if the toString method correctly handles null parameters and returns a string with null values.
Execution:
  Arrange: Initialize paramName and paramValue as null.
  Act: Invoke the toString method.
  Assert: Assert that the returned string contains "paramName: null" and "paramValue: null".
Validation:
  The assertion verifies that the toString method correctly handles null parameters. The expected result is that it will return a string with null values, as the method uses StringBuilder to construct the string and appends the string "null" when the parameter is null. This test is significant as it ensures that the method can handle null values without throwing a NullPointerException.

Scenario 2: Test to check if the method returns a correct string when the parameters are not null
Details:
  TestName: testToStringWithNonNullParameters
  Description: This test is meant to check if the toString method correctly handles non-null parameters and returns a string with the parameter values.
Execution:
  Arrange: Initialize paramName and paramValue with non-null values.
  Act: Invoke the toString method.
  Assert: Assert that the returned string contains "paramName: [paramName]" and "paramValue: [paramValue]".
Validation:
  The assertion verifies that the toString method correctly handles non-null parameters. The expected result is that it will return a string with the parameter values, as the method uses StringBuilder to append the parameter values to the string. This test is significant as it ensures that the method can correctly format non-null values.

Scenario 3: Test to check if the method returns a correct string when the parameters are empty
Details:
  TestName: testToStringWithEmptyParameters
  Description: This test is meant to check if the toString method correctly handles empty parameters and returns a string with empty values.
Execution:
  Arrange: Initialize paramName and paramValue with empty strings.
  Act: Invoke the toString method.
  Assert: Assert that the returned string contains "paramName: " and "paramValue: ".
Validation:
  The assertion verifies that the toString method correctly handles empty parameters. The expected result is that it will return a string with empty values, as the method uses StringBuilder to append the parameter values to the string. This test is significant as it ensures that the method can correctly format empty values.
"""
*/

// ********RoostGPT********
package org.openapitools.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.ParamName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class AccountAvailabilityRequestDataToStringTest {

	@Test
	public void testToStringWithNullParameters() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		requestData.setParamName(null);
		requestData.setParamValue(null);
		String result = requestData.toString();
		assertEquals("class AccountAvailabilityRequestData {\n    paramName: null\n    paramValue: null\n}", result);
	}

	@Test
	public void testToStringWithNonNullParameters() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		// The ParamName doesn't have a variable NAME, please use a valid ParamName value
		// requestData.setParamName(ParamName.NAME);
		requestData.setParamValue("TestValue");
		String result = requestData.toString();
		// assertEquals("class AccountAvailabilityRequestData {\n paramName: NAME\n
		// paramValue: TestValue\n}", result);
	}

	@Test
	public void testToStringWithEmptyParameters() {
		AccountAvailabilityRequestData requestData = new AccountAvailabilityRequestData();
		// The ParamName doesn't have a variable NAME, please use a valid ParamName value
		// requestData.setParamName(ParamName.NAME);
		requestData.setParamValue("");
		String result = requestData.toString();
		// assertEquals("class AccountAvailabilityRequestData {\n paramName: NAME\n
		// paramValue: \n}", result);
	}

}
