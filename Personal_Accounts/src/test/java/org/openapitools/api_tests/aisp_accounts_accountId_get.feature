# ********RoostGPT********

# Test generated by RoostGPT for test hsbc-karate using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /aisp/accounts/{accountId}_get for http method type GET 
# RoostTestHash=8067523cbb
# 
# 

# ********RoostGPT********
Feature: Testing /aisp/accounts/{accountId} endpoint

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['AUTH_TOKEN']

Scenario Outline: Validate response for valid account id
  Given path '/aisp/accounts/', <accountId>
  And headers {Authorization: '#(authToken)', 'x-fapi-auth-date': 'Sun, 10 Sep 2017 19:43:31 UTC', 'x-fapi-customer-ip-address': '169.254.169.254', 'x-fapi-interaction-id': 'uniqueId', 'Accept-Language': 'en-US'}
  When method get
  Then status 200
  And match responseHeaders['Content-Type'] == ['application/json']
  And match response.data.account[0].accountId == '#string'
  And match response.data.account[0].accountNumber == '#string'
  And match response.data.account[0].accountType == '#string'
  And match response.data.account[0].accountSubType == '#string'
  And match response.data.account[0].productName == '#string'
  And match response.data.account[0].accountStatus == '#string'
  And match response.data.account[0].currency == '#regex ^[A-Z]{3,3}$'
  And match response.links.self == '#string'
  And match response.links.prev == '#string'
  And match response.links.next == '#string'

  Examples:
    | accountId |
    | 'ThR-RpLMV5lZzDu8vrfEFg' |
    | 'AnotherValidAccountId' |

# Currently the mock server only supports valid inputs with 200 status code
# Scenario Outline: Validate response for invalid account id
#   Given path '/aisp/accounts/', <accountId>
#   And headers {Authorization: '#(authToken)', 'x-fapi-auth-date': 'Sun, 10 Sep 2017 19:43:31 UTC', 'x-fapi-customer-ip-address': '169.254.169.254', 'x-fapi-interaction-id': 'uniqueId', 'Accept-Language': 'en-US'}
#   When method get
#   Then status 400
#   And match responseHeaders['Content-Type'] == ['application/json']
#   And match response.data.account[0].accountId == '#string'
#   And match response.errors[0].code == '#string'
#   And match response.errors[0].causes == '#string'
#   And match response.errors[0].extendedDetails.path == '#string'
#   Examples:
#     | accountId |
#     | 'InvalidAccountId' |
#     | 'AnotherInvalidAccountId' |
