# ********RoostGPT********

# Test generated by RoostGPT for test hsbc-karate using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /aisp/accounts/availability_post for http method type POST 
# RoostTestHash=0661196b3a
# 
# 

# ********RoostGPT********
Feature: Testing /aisp/accounts/availability API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def auth_token = karate.properties['AUTH_TOKEN']

Scenario Outline: Test all the possible responses from the API

  Given path "/aisp/accounts/availability"
  And header Authorization = auth_token
  And header Content-Type = 'application/json'
  And header x-fapi-auth-date = '<x-fapi-auth-date>'
  And header x-fapi-customer-ip-address = '<x-fapi-customer-ip-address>'
  And header x-fapi-interaction-id = '<x-fapi-interaction-id>'
  And header Accept-Language = '<Accept-Language>'
  And request {"data":[{"paramName":"<paramName>","paramValue":"<paramValue>"}]}
  When method post
  Then status <status>
  And match response == <expectedResponseBody>

  Examples:
    | x-fapi-auth-date    | x-fapi-customer-ip-address | x-fapi-interaction-id | Accept-Language | paramName | paramValue | status | expectedResponseBody |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 200 | { data: [{ paramName: 'param1', status: 'success' }] } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 400 | { id: 'error1', errors: [{ code: '400', causes: 'Bad Request' }] } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 401 | { } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 403 | { } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 405 | { id: 'error2', errors: [{ code: '405', causes: 'Method Not Allowed' }] } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 406 | { id: 'error3', errors: [{ code: '406', causes: 'Not Acceptable' }] } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 415 | { id: 'error4', errors: [{ code: '415', causes: 'Unsupported Media Type' }] } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 429 | { message: 'Too Many Requests' } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 500 | { id: 'error5', errors: [{ code: '500', causes: 'Internal Server Error' }] } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 503 | { message: 'Service Unavailable' } |
    | '2021-04-28T15:35:07Z' | '127.0.0.1' | '123456789' | 'en-US' | 'param1' | 'value1' | 504 | { message: 'Gateway Timeout' } |
