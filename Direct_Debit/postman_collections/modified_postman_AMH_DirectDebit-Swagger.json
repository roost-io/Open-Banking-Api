{
	"info": {
		"_postman_id": "6a787413-ef2e-4d3d-9783-6e9dacc16a4d",
		"name": "Real-time Direct Debit API Specification for HK CMB",
		"description": "Swagger for Real-time Direct Debit API Specification",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20013739"
	},
	"item": [
		{
			"name": "direct-debit-consents",
			"item": [
				{
					"name": "{consentId}",
					"item": [
						{
							"name": "consent-retrival",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" ",
											"// ********RoostGPT********",
											"/*",
											"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
											"",
											"",
											"Test generated for /direct-debit-consents/:consentId for http method type get in postman framework",
											"",
											"*/",
											"",
											"// ********RoostGPT********",
											"",
											"let responseData;",
											"const contentType = pm.response.headers.get('Content-Type');",
											"if(contentType === \"application/xml\"){",
											"    responseData = xml2Json(responseBody);",
											"} else{",
											"    responseData = pm.response.json();",
											"}",
											"if (pm.variables.get(\"statusCode\")) {",
											"  // Compare the statusCode variable with the response code for assertion",
											"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
											"}",
											"",
											"// let responseTime = 800",
											"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
											"",
											"if (pm.response.code == 200){",
											"    pm.test(\"OK\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"OK\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `data` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`data`)){",
											"          if(pm.expect(_.get(responseData[0], `data`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `data`, null)).to.equal(\"object\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `data` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){",
											"          if(pm.expect(_.get(pm.response.json(), `data`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `data`, null)).to.equal(\"object\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `data.consentId` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`data.consentId`)){",
											"          if(pm.expect(_.get(responseData[0], `data.consentId`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `data.consentId`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `data.consentId` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.consentId`)){",
											"          if(pm.expect(_.get(pm.response.json(), `data.consentId`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `data.consentId`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('data.consentId length to be atmost `128`',function(){",
											"          pm.expect(_.get(responseData, \"data.consentId\", \"\").length).to.be.at.most(128);",
											"        })",
											"  ",
											"        pm.test('data.consentId length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"data.consentId\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `data.creationDate` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`data.creationDate`)){",
											"          if(pm.expect(_.get(responseData[0], `data.creationDate`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `data.creationDate`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `data.creationDate` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.creationDate`)){",
											"          if(pm.expect(_.get(pm.response.json(), `data.creationDate`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `data.creationDate`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"            pm.test('data.creationDate format to be date-time',function(){",
											"                pm.expect(_.get(responseData, \"data.creationDate\", \"\")).to.match(/^\\d{4}-\\d{2}-\\d{2}T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)\\.\\d{3}Z$/);",
											"            })",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `data.status` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`data.status`)){",
											"          if(pm.expect(_.get(responseData[0], `data.status`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `data.status`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `data.status` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.status`)){",
											"          if(pm.expect(_.get(pm.response.json(), `data.status`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `data.status`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											" ",
											"        pm.test('data.status to be one of enum', function(){ ",
											"          pm.expect(_.get(responseData, \"data.status\", \"\")).to.include.oneOf([\"PendingAuthorise\",\"Rejected\",\"Authorised\",\"Revoked\"]);",
											"        })",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `data.statusUpdateDate` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`data.statusUpdateDate`)){",
											"          if(pm.expect(_.get(responseData[0], `data.statusUpdateDate`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `data.statusUpdateDate`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `data.statusUpdateDate` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.statusUpdateDate`)){",
											"          if(pm.expect(_.get(pm.response.json(), `data.statusUpdateDate`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `data.statusUpdateDate`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"            pm.test('data.statusUpdateDate format to be date-time',function(){",
											"                pm.expect(_.get(responseData, \"data.statusUpdateDate\", \"\")).to.match(/^\\d{4}-\\d{2}-\\d{2}T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)\\.\\d{3}Z$/);",
											"            })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `data.permissions` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`data.permissions`)){",
											"              if(pm.expect(_.get(responseData[0], `data.permissions`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `data.permissions`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `data.permissions` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`data.permissions`)){",
											"              if(pm.expect(_.get(pm.response.json(), `data.permissions`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `data.permissions`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('data.permissions length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"data.permissions\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `data.expirationDate` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`data.expirationDate`)){",
											"          if(pm.expect(_.get(responseData[0], `data.expirationDate`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `data.expirationDate`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `data.expirationDate` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.expirationDate`)){",
											"          if(pm.expect(_.get(pm.response.json(), `data.expirationDate`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `data.expirationDate`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"            pm.test('data.expirationDate format to be date-time',function(){",
											"                pm.expect(_.get(responseData, \"data.expirationDate\", \"\")).to.match(/^\\d{4}-\\d{2}-\\d{2}T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)\\.\\d{3}Z$/",
											");",
											"            })",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `links` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`links`)){",
											"          if(pm.expect(_.get(responseData[0], `links`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `links`, null)).to.equal(\"object\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `links` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`links`)){",
											"          if(pm.expect(_.get(pm.response.json(), `links`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `links`, null)).to.equal(\"object\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `links.self` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`links.self`)){",
											"          if(pm.expect(_.get(responseData[0], `links.self`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `links.self`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `links.self` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`links.self`)){",
											"          if(pm.expect(_.get(pm.response.json(), `links.self`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `links.self`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											"",
											"if (pm.response.code == 400){",
											"    pm.test(\"Bad Request\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 401){",
											"    pm.test(\"Unauthorised\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});",
											"}",
											"",
											"if (pm.response.code == 403){",
											"    pm.test(\"Forbidden\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});",
											"}",
											"",
											"if (pm.response.code == 405){",
											"    pm.test(\"Method Not Allowed\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 406){",
											"    pm.test(\"Not Acceptable\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 429){",
											"    pm.test(\"Too Many Requests\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											"",
											"if (pm.response.code == 500){",
											"    pm.test(\"Internal Server Error\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 503){",
											"    pm.test(\"Service Unavailable\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											"",
											"if (pm.response.code == 504){",
											"    pm.test(\"Gateway Timeout\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents",
										":consentId"
									],
									"variable": [
										{
											"key": "consentId",
											"value": "{{consentId}}",
											"description": "(Required) Consent Id"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"consentId\": \"voluptate anim ipsum\",\n    \"creationDate\": \"2020-12-02T11:35:09.342Z\",\n    \"status\": \"Revoked\",\n    \"statusUpdateDate\": \"2010-09-02T20:27:21.320Z\",\n    \"permissions\": [\n      \"<string>\"\n    ],\n    \"expirationDate\": \"1986-11-20T02:46:24.080Z\"\n  },\n  \"links\": {\n    \"self\": \"http://SMllCLJPiitrKFSMKmST.leaX9K9iVFMLlqGS9wB5mKA.EblAQ,y.xTOziw-G\",\n    \"prev\": \"http://ABtDAHyrtgOTOKDfFlOGTVCEqyWdYXOl.iunrMVOmXndiMZSOodzf9b1tIkbAfkcrwfYSJIvQdEBeqkSVPN\",\n    \"next\": \"https://QZAfSTEZQbQhjZNXwWKHrihRTwu.egkdseEMcX8IV9RYQLhLXoDP0qDjE\"\n  }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Unauthorised",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Method Not Allowed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Too Many Requests",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Retry-After",
											"value": "{{Retry-After}}",
											"description": "Header indicating the time (in seconds) that the TSP could wait before retrying an operation. The bank could consider including this header along with responses with the HTTP status code of 429 (Too Many Requests)."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"in\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"in\"\n}"
								},
								{
									"name": "Gateway Timeout",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Gateway Timeout",
									"code": 504,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"in\"\n}"
								}
							]
						},
						{
							"name": "consent-deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" ",
											"// ********RoostGPT********",
											"/*",
											"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
											"",
											"",
											"Test generated for /direct-debit-consents/:consentId for http method type delete in postman framework",
											"",
											"*/",
											"",
											"// ********RoostGPT********",
											"",
											"let responseData;",
											"const contentType = pm.response.headers.get('Content-Type');",
											"if(contentType === \"application/xml\"){",
											"    responseData = xml2Json(responseBody);",
											"} ",
											"if (pm.variables.get(\"statusCode\")) {",
											"  // Compare the statusCode variable with the response code for assertion",
											"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
											"}",
											"",
											"// let responseTime = 800",
											"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
											"",
											"if (pm.response.code == 204){",
											"    pm.test(\"No Content\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"No Content\");});",
											"}",
											"",
											"if (pm.response.code == 400){",
											"    pm.test(\"Bad Request\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 401){",
											"    pm.test(\"Unauthorised\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});",
											"}",
											"",
											"if (pm.response.code == 403){",
											"    pm.test(\"Forbidden\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});",
											"}",
											"",
											"if (pm.response.code == 405){",
											"    pm.test(\"Method Not Allowed\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 406){",
											"    pm.test(\"Not Acceptable\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 429){",
											"    pm.test(\"Too Many Requests\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											"",
											"if (pm.response.code == 500){",
											"    pm.test(\"Internal Server Error\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `id` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
											"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"  ",
											"        pm.test('id length to be atmost `40`',function(){",
											"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
											"        })",
											"  ",
											"        pm.test('id length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"        if(Array.isArray(responseData)){",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        } else {",
											"          pm.test('Response has the `errors` field',function(){",
											"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
											"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
											"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
											"              }",
											"            }",
											"",
											"          })",
											"        }      ",
											"          ",
											"  ",
											"        pm.test('errors length to be alteast `1`',function(){",
											"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      pm.test(`Each object in the errors field has all the required fields`,function(){",
											"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
											"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
											"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
											"            let iterator = errors_it;",
											"            \t",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
											"          }",
											"      })",
											"",
											"    }",
											"",
											"      if(Array.isArray(responseData)) {",
											"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
											"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"        })",
											"",
											"      } else {      ",
											"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
											"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
											"          }",
											"      })",
											"",
											"    }",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
											"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
											"        })",
											"  ",
											"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
											"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
											"        })",
											"",
											"          }",
											"",
											"      })",
											"});",
											"}",
											"",
											"if (pm.response.code == 503){",
											"    pm.test(\"Service Unavailable\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											"",
											"if (pm.response.code == 504){",
											"    pm.test(\"Gateway Timeout\", function () {",
											"      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");",
											"    if(Array.isArray(responseData)) {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    } else {",
											"      pm.test('Response has the `message` field',function(){",
											"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
											"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
											"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
											"          }",
											"        }",
											"",
											"      })",
											"    }",
											"});",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents",
										":consentId"
									],
									"variable": [
										{
											"key": "consentId",
											"value": "{{consentId}}",
											"description": "(Required) Consent Id"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Unauthorised",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Method Not Allowed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Too Many Requests",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Retry-After",
											"value": "{{Retry-After}}",
											"description": "Header indicating the time (in seconds) that the TSP could wait before retrying an operation. The bank could consider including this header along with responses with the HTTP status code of 429 (Too Many Requests)."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"in\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"in\"\n}"
								},
								{
									"name": "Gateway Timeout",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
												"key": "Authorization",
												"value": "{{Authorization}}"
											},
											{
												"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}"
											},
											{
												"description": "Customer IP address when making a request with the TSP application.",
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}"
											},
											{
												"description": "Unique correlation ID to playback response for each request.",
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}"
											},
											{
												"description": "Standard HTTP header to indicate the natural language set used in the response.",
												"key": "Accept-Language",
												"value": "{{Accept-Language}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/direct-debit-consents/:consentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"direct-debit-consents",
												":consentId"
											],
											"variable": [
												{
													"key": "consentId",
													"value": "{{consentId}}",
													"description": "(Required) Consent Id"
												},
												{
													"key": "version",
													"value": "{{version}}"
												}
											]
										}
									},
									"status": "Gateway Timeout",
									"code": 504,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-fapi-interaction-id",
											"value": "{{x-fapi-interaction-id}}",
											"description": "Unique correlation ID to playback response for each request."
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"in\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "consent-setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" ",
									"// ********RoostGPT********",
									"/*",
									"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
									"",
									"",
									"Test generated for /direct-debit-consents for http method type post in postman framework",
									"",
									"*/",
									"",
									"// ********RoostGPT********",
									"",
									"let responseData;",
									"const contentType = pm.response.headers.get('Content-Type');",
									"if(contentType === \"application/xml\"){",
									"    responseData = xml2Json(responseBody);",
									"} else{",
									"    responseData = pm.response.json();",
									"}",
									"if (pm.variables.get(\"statusCode\")) {",
									"  // Compare the statusCode variable with the response code for assertion",
									"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
									"}",
									"",
									"// let responseTime = 800",
									"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"",
									"if (pm.response.code == 201){",
									"    pm.test(\"Created\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `data` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`data`)){",
									"          if(pm.expect(_.get(responseData[0], `data`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `data`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `data` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){",
									"          if(pm.expect(_.get(pm.response.json(), `data`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `data`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `data.consentId` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`data.consentId`)){",
									"          if(pm.expect(_.get(responseData[0], `data.consentId`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `data.consentId`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `data.consentId` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.consentId`)){",
									"          if(pm.expect(_.get(pm.response.json(), `data.consentId`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `data.consentId`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('data.consentId length to be atmost `128`',function(){",
									"          pm.expect(_.get(responseData, \"data.consentId\", \"\").length).to.be.at.most(128);",
									"        })",
									"  ",
									"        pm.test('data.consentId length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"data.consentId\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `data.creationDate` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`data.creationDate`)){",
									"          if(pm.expect(_.get(responseData[0], `data.creationDate`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `data.creationDate`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `data.creationDate` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.creationDate`)){",
									"          if(pm.expect(_.get(pm.response.json(), `data.creationDate`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `data.creationDate`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"            pm.test('data.creationDate format to be date-time',function(){",
									"                pm.expect(_.get(responseData, \"data.creationDate\", \"\")).to.match(/^\\d{4}-\\d{2}-\\d{2}T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)\\.\\d{3}Z$/);",
									"            })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `data.status` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`data.status`)){",
									"          if(pm.expect(_.get(responseData[0], `data.status`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `data.status`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `data.status` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.status`)){",
									"          if(pm.expect(_.get(pm.response.json(), `data.status`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `data.status`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									" ",
									"        pm.test('data.status to be one of enum', function(){ ",
									"          pm.expect(_.get(responseData, \"data.status\", \"\")).to.include.oneOf([\"PendingAuthorise\",\"Rejected\",\"Authorised\",\"Revoked\"]);",
									"        })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `data.statusUpdateDate` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`data.statusUpdateDate`)){",
									"          if(pm.expect(_.get(responseData[0], `data.statusUpdateDate`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `data.statusUpdateDate`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `data.statusUpdateDate` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.statusUpdateDate`)){",
									"          if(pm.expect(_.get(pm.response.json(), `data.statusUpdateDate`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `data.statusUpdateDate`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"            pm.test('data.statusUpdateDate format to be date-time',function(){",
									"                pm.expect(_.get(responseData, \"data.statusUpdateDate\", \"\")).to.match(/^\\d{4}-\\d{2}-\\d{2}T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)\\.\\d{3}Z$/);",
									"            })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `data.permissions` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`data.permissions`)){",
									"              if(pm.expect(_.get(responseData[0], `data.permissions`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `data.permissions`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `data.permissions` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`data.permissions`)){",
									"              if(pm.expect(_.get(pm.response.json(), `data.permissions`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `data.permissions`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('data.permissions length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"data.permissions\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `data.expirationDate` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`data.expirationDate`)){",
									"          if(pm.expect(_.get(responseData[0], `data.expirationDate`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `data.expirationDate`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `data.expirationDate` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`data.expirationDate`)){",
									"          if(pm.expect(_.get(pm.response.json(), `data.expirationDate`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `data.expirationDate`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"            pm.test('data.expirationDate format to be date-time',function(){",
									"                pm.expect(_.get(responseData, \"data.expirationDate\", \"\")).to.match(/^\\d{4}-\\d{2}-\\d{2}T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)\\.\\d{3}Z$/);",
									"            })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `links` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`links`)){",
									"          if(pm.expect(_.get(responseData[0], `links`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `links`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `links` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`links`)){",
									"          if(pm.expect(_.get(pm.response.json(), `links`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `links`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `links.self` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`links.self`)){",
									"          if(pm.expect(_.get(responseData[0], `links.self`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `links.self`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `links.self` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`links.self`)){",
									"          if(pm.expect(_.get(pm.response.json(), `links.self`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `links.self`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"});",
									"}",
									"",
									"if (pm.response.code == 400){",
									"    pm.test(\"Bad Request\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 401){",
									"    pm.test(\"Unauthorised\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});",
									"}",
									"",
									"if (pm.response.code == 403){",
									"    pm.test(\"Forbidden\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});",
									"}",
									"",
									"if (pm.response.code == 405){",
									"    pm.test(\"Method Not Allowed\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 406){",
									"    pm.test(\"Not Acceptable\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 415){",
									"    pm.test(\"Unsupported Media Type\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 429){",
									"    pm.test(\"Too Many Requests\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `message` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
									"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `message` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
									"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"});",
									"}",
									"",
									"if (pm.response.code == 500){",
									"    pm.test(\"Internal Server Error\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 503){",
									"    pm.test(\"Service Unavailable\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `message` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
									"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `message` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
									"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"});",
									"}",
									"",
									"if (pm.response.code == 504){",
									"    pm.test(\"Gateway Timeout\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `message` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){",
									"          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `message` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){",
									"          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "Customer IP address when making a request with the TSP application.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "Unique correlation ID to playback response for each request.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "Standard HTTP header to indicate the natural language set used in the response.",
								"key": "Accept-Language",
								"value": "{{Accept-Language}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/direct-debit-consents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"direct-debit-consents"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"consentId\": \"voluptate anim ipsum\",\n    \"creationDate\": \"2020-12-02T11:35:09.342Z\",\n    \"status\": \"Revoked\",\n    \"statusUpdateDate\": \"2010-09-02T20:27:21.320Z\",\n    \"permissions\": [\n      \"<string>\"\n    ],\n    \"expirationDate\": \"1986-11-20T02:46:24.080Z\"\n  },\n  \"links\": {\n    \"self\": \"http://SMllCLJPiitrKFSMKmST.leaX9K9iVFMLlqGS9wB5mKA.EblAQ,y.xTOziw-G\",\n    \"prev\": \"http://ABtDAHyrtgOTOKDfFlOGTVCEqyWdYXOl.iunrMVOmXndiMZSOodzf9b1tIkbAfkcrwfYSJIvQdEBeqkSVPN\",\n    \"next\": \"https://QZAfSTEZQbQhjZNXwWKHrihRTwu.egkdseEMcX8IV9RYQLhLXoDP0qDjE\"\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Unauthorised",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Not Acceptable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Unsupported Media Type",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Retry-After",
									"value": "{{Retry-After}}",
									"description": "Header indicating the time (in seconds) that the TSP could wait before retrying an operation. The bank could consider including this header along with responses with the HTTP status code of 429 (Too Many Requests)."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"in\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"in\"\n}"
						},
						{
							"name": "Gateway Timeout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Customer last logged-in time with the TSP application.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "Customer IP address when making a request with the TSP application.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "Unique correlation ID to playback response for each request.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "Standard HTTP header to indicate the natural language set used in the response.",
										"key": "Accept-Language",
										"value": "{{Accept-Language}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"permissions\": \"{{permissions}}\",\n        \"expirationDate\": \"{{expirationDate}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/direct-debit-consents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"direct-debit-consents"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-fapi-interaction-id",
									"value": "{{x-fapi-interaction-id}}",
									"description": "Unique correlation ID to playback response for each request."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"in\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "status",
			"item": [
				{
					"name": "getauthorisationstatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" ",
									"// ********RoostGPT********",
									"/*",
									"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
									"",
									"",
									"Test generated for /status/authorisations for http method type post in postman framework",
									"",
									"*/",
									"",
									"// ********RoostGPT********",
									"",
									"let responseData;",
									"const contentType = pm.response.headers.get('Content-Type');",
									"if(contentType === \"application/xml\"){",
									"    responseData = xml2Json(responseBody);",
									"} else{",
									"    responseData = pm.response.json();",
									"}",
									"if (pm.variables.get(\"statusCode\")) {",
									"  // Compare the statusCode variable with the response code for assertion",
									"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
									"}",
									"",
									"// let responseTime = 800",
									"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"",
									"if (pm.response.code == 201){",
									"    pm.test(\"Created\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `processResult` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult`)){",
									"          if(pm.expect(_.get(responseData[0], `processResult`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `processResult`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `processResult` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult`)){",
									"          if(pm.expect(_.get(pm.response.json(), `processResult`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `processResult`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `processResult.responseCode` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult.responseCode`)){",
									"          if(pm.expect(_.get(responseData[0], `processResult.responseCode`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `processResult.responseCode`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `processResult.responseCode` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult.responseCode`)){",
									"          if(pm.expect(_.get(pm.response.json(), `processResult.responseCode`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `processResult.responseCode`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									" ",
									"        pm.test('processResult.responseCode to be one of enum', function(){ ",
									"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\")).to.include.oneOf([\"00\",\"99\"]);",
									"        })",
									"  ",
									"        pm.test('processResult.responseCode length to be atmost `4`',function(){",
									"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\").length).to.be.at.most(4);",
									"        })    ",
									"          ",
									"        pm.test('Response has the `processResult.rejectReasonList` field', function () {",
									"            pm.expect(pm.response.json().processResult).to.have.property('rejectReasonList');",
									"        });",
									"",
									"    pm.test(`Each object in the processResult.rejectReasonList field has all the required fields`, function () {",
									"    pm.expect(pm.response.json()).to.have.nested.property(`processResult.rejectReasonList`);",
									"    let rejectReasonList = _.get(pm.response.json(), `processResult.rejectReasonList`, null);",
									"    if (rejectReasonList !== null) {",
									"        for (let rejectReasonList_it = 0; rejectReasonList_it < rejectReasonList.length; rejectReasonList_it++) {",
									"            let iterator = rejectReasonList_it;",
									"",
									"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonCode' as 'string'`, function () {",
									"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode).to.be.a('string');",
									"            });",
									"",
									"            if (rejectReasonList[rejectReasonList_it].rejectReasonCode !== null) {",
									"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonCode length to be at most 10`, function () {",
									"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode.length).to.be.at.most(10);",
									"                });",
									"            }",
									"",
									"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonInfomation' as 'string'`, function () {",
									"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation).to.be.a('string');",
									"            });",
									"",
									"            if (rejectReasonList[rejectReasonList_it].rejectReasonInfomation !== null) {",
									"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonInfomation length to be at most 105`, function () {",
									"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation.length).to.be.at.most(105);",
									"                });",
									"            }",
									"        }",
									"    }",
									"});",
									"",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `mandateIdentification` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`mandateIdentification`)){",
									"          if(pm.expect(_.get(responseData[0], `mandateIdentification`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `mandateIdentification`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `mandateIdentification` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`mandateIdentification`)){",
									"          if(pm.expect(_.get(pm.response.json(), `mandateIdentification`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `mandateIdentification`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('mandateIdentification length to be atmost `35`',function(){",
									"          pm.expect(_.get(responseData, \"mandateIdentification\", \"\").length).to.be.at.most(35);",
									"        })",
									"  ",
									"        pm.test('mandateIdentification length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"mandateIdentification\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `mandateStatus` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`mandateStatus`)){",
									"          if(pm.expect(_.get(responseData[0], `mandateStatus`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `mandateStatus`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `mandateStatus` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`mandateStatus`)){",
									"          if(pm.expect(_.get(pm.response.json(), `mandateStatus`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `mandateStatus`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									" ",
									"        pm.test('mandateStatus to be one of enum', function(){ ",
									"          pm.expect(_.get(responseData, \"mandateStatus\", \"\")).to.include.oneOf([\"ERROR\",\"PDOU\",\"ACTIVE\",\"EXPIRED\",\"DORMANT\",\"SUSPENDED\",\"CANCELLED\",\"DELETED\",\"PDNG\",\"PDFP\"]);",
									"        })",
									"  ",
									"        pm.test('mandateStatus length to be atmost `10`',function(){",
									"          pm.expect(_.get(responseData, \"mandateStatus\", \"\").length).to.be.at.most(10);",
									"        })",
									"});",
									"}",
									"",
									"if (pm.response.code == 400){",
									"    pm.test(\"Bad Request\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 401){",
									"    pm.test(\"Authorisation failure\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 403){",
									"    pm.test(\"Authentication failure\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 404){",
									"    pm.test(\"Not Found\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Not Found\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 405){",
									"    pm.test(\"Method Not Allowed\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 406){",
									"    pm.test(\"Not Acceptable\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 415){",
									"    pm.test(\"Media Not Supported\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 500){",
									"    pm.test(\"Internal Server Error\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/status/authorisations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"authorisations"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"processResult\": {\n    \"responseCode\": \"99\",\n    \"rejectReasonList\": [\n      {\n        \"rejectReasonCode\": \"cillum a\",\n        \"rejectReasonInfomation\": \"aliquip dolor adipisicing\"\n      },\n      {\n        \"rejectReasonCode\": \"\",\n        \"rejectReasonInfomation\": \"veniam nisi\"\n      }\n    ]\n  },\n  \"mandateIdentification\": \"aliqua cu\",\n  \"mandateStatus\": \"CANCELLED\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Authorisation failure",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Authentication failure",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Not Acceptable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Media Not Supported",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key. The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/authorisations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"authorisations"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						}
					]
				},
				{
					"name": "getinstructionstatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" ",
									"// ********RoostGPT********",
									"/*",
									"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
									"",
									"",
									"Test generated for /status/instructions for http method type post in postman framework",
									"",
									"*/",
									"",
									"// ********RoostGPT********",
									"",
									"let responseData;",
									"const contentType = pm.response.headers.get('Content-Type');",
									"if(contentType === \"application/xml\"){",
									"    responseData = xml2Json(responseBody);",
									"} else{",
									"    responseData = pm.response.json();",
									"}",
									"if (pm.variables.get(\"statusCode\")) {",
									"  // Compare the statusCode variable with the response code for assertion",
									"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
									"}",
									"",
									"// let responseTime = 800",
									"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"",
									"if (pm.response.code == 201){",
									"    pm.test(\"Created\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `paymentInformationStatus` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`paymentInformationStatus`)){",
									"          if(pm.expect(_.get(responseData[0], `paymentInformationStatus`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `paymentInformationStatus`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `paymentInformationStatus` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`paymentInformationStatus`)){",
									"          if(pm.expect(_.get(pm.response.json(), `paymentInformationStatus`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `paymentInformationStatus`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									" ",
									"        pm.test('paymentInformationStatus to be one of enum', function(){ ",
									"          pm.expect(_.get(responseData, \"paymentInformationStatus\", \"\")).to.include.oneOf([\"ACSC\",\"RJCT\",\"ACCP\",\"ACSP\"]);",
									"        })",
									"  ",
									"        pm.test('paymentInformationStatus length to be atmost `4`',function(){",
									"          pm.expect(_.get(responseData, \"paymentInformationStatus\", \"\").length).to.be.at.most(4);",
									"        })",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `processResult` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult`)){",
									"          if(pm.expect(_.get(responseData[0], `processResult`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `processResult`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `processResult` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult`)){",
									"          if(pm.expect(_.get(pm.response.json(), `processResult`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `processResult`, null)).to.equal(\"object\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `processResult.responseCode` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult.responseCode`)){",
									"          if(pm.expect(_.get(responseData[0], `processResult.responseCode`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `processResult.responseCode`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `processResult.responseCode` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult.responseCode`)){",
									"          if(pm.expect(_.get(pm.response.json(), `processResult.responseCode`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `processResult.responseCode`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									" ",
									"        pm.test('processResult.responseCode to be one of enum', function(){ ",
									"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\")).to.include.oneOf([\"00\",\"99\"]);",
									"        })",
									"  ",
									"        pm.test('processResult.responseCode length to be atmost `4`',function(){",
									"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\").length).to.be.at.most(4);",
									"        })",
									"",
									"        pm.test('Response has the `processResult.rejectReasonList` field', function () {",
									"            pm.expect(pm.response.json().processResult).to.have.property('rejectReasonList');",
									"        });",
									"",
									"    pm.test(`Each object in the processResult.rejectReasonList field has all the required fields`, function () {",
									"    pm.expect(pm.response.json()).to.have.nested.property(`processResult.rejectReasonList`);",
									"    let rejectReasonList = _.get(pm.response.json(), `processResult.rejectReasonList`, null);",
									"    if (rejectReasonList !== null) {",
									"        for (let rejectReasonList_it = 0; rejectReasonList_it < rejectReasonList.length; rejectReasonList_it++) {",
									"            let iterator = rejectReasonList_it;",
									"",
									"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonCode' as 'string'`, function () {",
									"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode).to.be.a('string');",
									"            });",
									"",
									"            if (rejectReasonList[rejectReasonList_it].rejectReasonCode !== null) {",
									"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonCode length to be at most 10`, function () {",
									"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode.length).to.be.at.most(10);",
									"                });",
									"            }",
									"",
									"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonInfomation' as 'string'`, function () {",
									"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation).to.be.a('string');",
									"            });",
									"",
									"            if (rejectReasonList[rejectReasonList_it].rejectReasonInfomation !== null) {",
									"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonInfomation length to be at most 105`, function () {",
									"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation.length).to.be.at.most(105);",
									"                });",
									"            }",
									"        }",
									"    }",
									"});",
									"",
									"",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `transactionIdentification` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`transactionIdentification`)){",
									"          if(pm.expect(_.get(responseData[0], `transactionIdentification`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `transactionIdentification`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `transactionIdentification` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`transactionIdentification`)){",
									"          if(pm.expect(_.get(pm.response.json(), `transactionIdentification`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `transactionIdentification`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('transactionIdentification length to be atmost `35`',function(){",
									"          pm.expect(_.get(responseData, \"transactionIdentification\", \"\").length).to.be.at.most(35);",
									"        })",
									"});",
									"}",
									"",
									"if (pm.response.code == 400){",
									"    pm.test(\"Bad Request\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 401){",
									"    pm.test(\"Authorisation failure\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 403){",
									"    pm.test(\"Authentication failure\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 404){",
									"    pm.test(\"Not Found\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Not Found\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 405){",
									"    pm.test(\"Method Not Allowed\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 406){",
									"    pm.test(\"Not Acceptable\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 415){",
									"    pm.test(\"Media Not Supported\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									"",
									"if (pm.response.code == 500){",
									"    pm.test(\"Internal Server Error\", function () {",
									"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
									"    if(Array.isArray(responseData)) {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    } else {",
									"      pm.test('Response has the `id` field',function(){",
									"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
									"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
									"          }",
									"        }",
									"",
									"      })",
									"    }",
									"  ",
									"        pm.test('id length to be atmost `40`',function(){",
									"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
									"        })",
									"  ",
									"        pm.test('id length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"        if(Array.isArray(responseData)){",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        } else {",
									"          pm.test('Response has the `errors` field',function(){",
									"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
									"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
									"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
									"              }",
									"            }",
									"",
									"          })",
									"        }      ",
									"          ",
									"  ",
									"        pm.test('errors length to be alteast `1`',function(){",
									"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      pm.test(`Each object in the errors field has all the required fields`,function(){",
									"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
									"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
									"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
									"            let iterator = errors_it;",
									"            \t",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
									"          }",
									"      })",
									"",
									"    }",
									"",
									"      if(Array.isArray(responseData)) {",
									"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
									"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"        })",
									"",
									"      } else {      ",
									"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
									"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
									"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
									"          }",
									"      })",
									"",
									"    }",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
									"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
									"        })",
									"  ",
									"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
									"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
									"        })",
									"",
									"          }",
									"",
									"      })",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/status/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"paymentInformationStatus\": \"ACSC\",\n  \"processResult\": {\n    \"responseCode\": \"00\",\n    \"rejectReasonList\": [\n      {\n        \"rejectReasonCode\": \"non eiusm\",\n        \"rejectReasonInfomation\": \"rep\"\n      },\n      {\n        \"rejectReasonCode\": \"dol\",\n        \"rejectReasonInfomation\": \"ad est\"\n      }\n    ]\n  },\n  \"transactionIdentification\": \"ipsum dolore magna nulla\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Authorisation failure",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Authentication failure",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Not Acceptable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Media Not Supported",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
										"key": "Authorization",
										"value": "{{Authorization}}"
									},
									{
										"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"description": "An RFC4122 UID used as a correlation id.",
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									},
									{
										"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
										"key": "x-idempotency-key",
										"value": "{{x-idempotency-key}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/status/instructions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status",
										"instructions"
									],
									"variable": [
										{
											"key": "version",
											"value": "{{version}}"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "direct-debit-setup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" ",
							"// ********RoostGPT********",
							"/*",
							"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
							"",
							"",
							"Test generated for /setup for http method type post in postman framework",
							"",
							"*/",
							"",
							"// ********RoostGPT********",
							"",
							"let responseData;",
							"const contentType = pm.response.headers.get('Content-Type');",
							"if(contentType === \"application/xml\"){",
							"    responseData = xml2Json(responseBody);",
							"} else{",
							"    responseData = pm.response.json();",
							"}",
							"if (pm.variables.get(\"statusCode\")) {",
							"  // Compare the statusCode variable with the response code for assertion",
							"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
							"}",
							"",
							"// let responseTime = 800",
							"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
							"",
							"if (pm.response.code == 201){",
							"    pm.test(\"Created\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							" ",
							"        pm.test('processResult.responseCode to be one of enum', function(){ ",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\")).to.include.oneOf([\"00\",\"99\"]);",
							"        })",
							"  ",
							"        pm.test('processResult.responseCode length to be atmost `4`',function(){",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\").length).to.be.at.most(4);",
							"        })",
							"",
							"        pm.test('Response has the `processResult.rejectReasonList` field', function () {",
							"            pm.expect(pm.response.json().processResult).to.have.property('rejectReasonList');",
							"        });",
							"",
							"    pm.test(`Each object in the processResult.rejectReasonList field has all the required fields`, function () {",
							"    pm.expect(pm.response.json()).to.have.nested.property(`processResult.rejectReasonList`);",
							"    let rejectReasonList = _.get(pm.response.json(), `processResult.rejectReasonList`, null);",
							"    if (rejectReasonList !== null) {",
							"        for (let rejectReasonList_it = 0; rejectReasonList_it < rejectReasonList.length; rejectReasonList_it++) {",
							"            let iterator = rejectReasonList_it;",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonCode' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonCode !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonCode length to be at most 10`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode.length).to.be.at.most(10);",
							"                });",
							"            }",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonInfomation' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonInfomation !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonInfomation length to be at most 105`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation.length).to.be.at.most(105);",
							"                });",
							"            }",
							"        }",
							"    }",
							"});",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `mandateIdentification` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`mandateIdentification`)){",
							"          if(pm.expect(_.get(responseData[0], `mandateIdentification`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `mandateIdentification`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `mandateIdentification` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`mandateIdentification`)){",
							"          if(pm.expect(_.get(pm.response.json(), `mandateIdentification`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `mandateIdentification`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('mandateIdentification length to be atmost `35`',function(){",
							"          pm.expect(_.get(responseData, \"mandateIdentification\", \"\").length).to.be.at.most(35);",
							"        })",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `otpIdentificationNumber` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`otpIdentificationNumber`)){",
							"          if(pm.expect(_.get(responseData[0], `otpIdentificationNumber`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `otpIdentificationNumber`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `otpIdentificationNumber` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`otpIdentificationNumber`)){",
							"          if(pm.expect(_.get(pm.response.json(), `otpIdentificationNumber`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `otpIdentificationNumber`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('otpIdentificationNumber length to be atmost `10`',function(){",
							"          pm.expect(_.get(responseData, \"otpIdentificationNumber\", \"\").length).to.be.at.most(10);",
							"        })",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `mandateStatus` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`mandateStatus`)){",
							"          if(pm.expect(_.get(responseData[0], `mandateStatus`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `mandateStatus`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `mandateStatus` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`mandateStatus`)){",
							"          if(pm.expect(_.get(pm.response.json(), `mandateStatus`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `mandateStatus`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							" ",
							"        pm.test('mandateStatus to be one of enum', function(){ ",
							"          pm.expect(_.get(responseData, \"mandateStatus\", \"\")).to.include.oneOf([\"PDNG\",\"PDFP\",\"PDOU\",\"ERROR\",\"ACTIVE\"]);",
							"        })",
							"  ",
							"        pm.test('mandateStatus length to be atmost `6`',function(){",
							"          pm.expect(_.get(responseData, \"mandateStatus\", \"\").length).to.be.at.most(6);",
							"        })",
							"});",
							"}",
							"",
							"if (pm.response.code == 400){",
							"    pm.test(\"Bad Request\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 401){",
							"    pm.test(\"Authorisation failure\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 403){",
							"    pm.test(\"Authentication failure\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 404){",
							"    pm.test(\"Not Found\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Found\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 405){",
							"    pm.test(\"Method Not Allowed\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 406){",
							"    pm.test(\"Not Acceptable\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 415){",
							"    pm.test(\"Media Not Supported\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 500){",
							"    pm.test(\"Internal Server Error\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
						"key": "x-fapi-customer-ip-address",
						"value": "{{x-fapi-customer-ip-address}}"
					},
					{
						"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
						"key": "x-fapi-auth-date",
						"value": "{{x-fapi-auth-date}}"
					},
					{
						"description": "An RFC4122 UID used as a correlation id.",
						"key": "x-fapi-interaction-id",
						"value": "{{x-fapi-interaction-id}}"
					},
					{
						"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
						"key": "x-idempotency-key",
						"value": "{{x-idempotency-key}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/setup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"setup"
					],
					"variable": [
						{
							"key": "version",
							"value": "{{version}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Created",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"processResult\": {\n    \"responseCode\": \"99\",\n    \"rejectReasonList\": [\n      {\n        \"rejectReasonCode\": \"inci\",\n        \"rejectReasonInfomation\": \"do id\"\n      },\n      {\n        \"rejectReasonCode\": \"\",\n        \"rejectReasonInfomation\": \"magna irure ipsum consequat\"\n      }\n    ]\n  },\n  \"mandateIdentification\": \"deserunt Duis\",\n  \"otpIdentificationNumber\": \"enim adipi\",\n  \"mobileNumber\": \"cillum sunt\",\n  \"mandateStatus\": \"PDOU\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Authorisation failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Authentication failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Method Not Allowed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Acceptable",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Media Not Supported",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unsupported Media Type",
					"code": 415,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantRequestIdentification\": \"{{merchantRequestIdentification}}\",\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"debtorPrivateIdentification\": \"{{debtorPrivateIdentification}}\",\n    \"debtorPrivateIdentificationSchemeName\": \"{{debtorPrivateIdentificationSchemeName}}\",\n    \"maximumAmountCurrency\": \"{{maximumAmountCurrency}}\",\n    \"maximumAmount\": \"{{maximumAmount}}\",\n    \"occurrences\": {\n        \"durationToDate\": \"{{durationToDate}}\",\n        \"frequencyType\": \"{{frequencyType}}\",\n        \"durationFromDate\": \"{{durationFromDate}}\"\n    },\n    \"ultimateDebtorName\": \"{{ultimateDebtorName}}\",\n    \"debtorMobileNumber\": \"{{debtorMobileNumber}}\",\n    \"otpHoldIndicator\": \"{{otpHoldIndicator}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/setup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"setup"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				}
			]
		},
		{
			"name": "postotpconfirmation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" ",
							"// ********RoostGPT********",
							"/*",
							"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
							"",
							"",
							"Test generated for /otpconfirmation for http method type post in postman framework",
							"",
							"*/",
							"",
							"// ********RoostGPT********",
							"",
							"let responseData;",
							"const contentType = pm.response.headers.get('Content-Type');",
							"if(contentType === \"application/xml\"){",
							"    responseData = xml2Json(responseBody);",
							"} else{",
							"    responseData = pm.response.json();",
							"}",
							"if (pm.variables.get(\"statusCode\")) {",
							"  // Compare the statusCode variable with the response code for assertion",
							"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
							"}",
							"",
							"// let responseTime = 800",
							"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
							"",
							"if (pm.response.code == 201){",
							"    pm.test(\"Created\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							" ",
							"        pm.test('processResult.responseCode to be one of enum', function(){ ",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\")).to.include.oneOf([\"00\",\"99\"]);",
							"        })",
							"  ",
							"        pm.test('processResult.responseCode length to be atmost `4`',function(){",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\").length).to.be.at.most(4);",
							"        })",
							"",
							"        pm.test('Response has the `processResult.rejectReasonList` field', function () {",
							"            pm.expect(pm.response.json().processResult).to.have.property('rejectReasonList');",
							"        });",
							"",
							"    pm.test(`Each object in the processResult.rejectReasonList field has all the required fields`, function () {",
							"    pm.expect(pm.response.json()).to.have.nested.property(`processResult.rejectReasonList`);",
							"    let rejectReasonList = _.get(pm.response.json(), `processResult.rejectReasonList`, null);",
							"    if (rejectReasonList !== null) {",
							"        for (let rejectReasonList_it = 0; rejectReasonList_it < rejectReasonList.length; rejectReasonList_it++) {",
							"            let iterator = rejectReasonList_it;",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonCode' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonCode !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonCode length to be at most 10`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode.length).to.be.at.most(10);",
							"                });",
							"            }",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonInfomation' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonInfomation !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonInfomation length to be at most 105`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation.length).to.be.at.most(105);",
							"                });",
							"            }",
							"        }",
							"    }",
							"});",
							"",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `mandateIdentification` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`mandateIdentification`)){",
							"          if(pm.expect(_.get(responseData[0], `mandateIdentification`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `mandateIdentification`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `mandateIdentification` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`mandateIdentification`)){",
							"          if(pm.expect(_.get(pm.response.json(), `mandateIdentification`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `mandateIdentification`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('mandateIdentification length to be atmost `64`',function(){",
							"          pm.expect(_.get(responseData, \"mandateIdentification\", \"\").length).to.be.at.most(64);",
							"        })",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `creditorReference` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`creditorReference`)){",
							"          if(pm.expect(_.get(responseData[0], `creditorReference`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `creditorReference`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `creditorReference` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`creditorReference`)){",
							"          if(pm.expect(_.get(pm.response.json(), `creditorReference`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `creditorReference`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('creditorReference length to be atmost `35`',function(){",
							"          pm.expect(_.get(responseData, \"creditorReference\", \"\").length).to.be.at.most(35);",
							"        })",
							"});",
							"}",
							"",
							"if (pm.response.code == 400){",
							"    pm.test(\"Bad Request\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 401){",
							"    pm.test(\"Authorisation failure\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 403){",
							"    pm.test(\"Authentication failure\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 404){",
							"    pm.test(\"Not Found\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Found\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 405){",
							"    pm.test(\"Method Not Allowed\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 406){",
							"    pm.test(\"Not Acceptable\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 415){",
							"    pm.test(\"Media Not Supported\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 500){",
							"    pm.test(\"Internal Server Error\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
						"key": "x-fapi-customer-ip-address",
						"value": "{{x-fapi-customer-ip-address}}"
					},
					{
						"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
						"key": "x-fapi-auth-date",
						"value": "{{x-fapi-auth-date}}"
					},
					{
						"description": "An RFC4122 UID used as a correlation id.",
						"key": "x-fapi-interaction-id",
						"value": "{{x-fapi-interaction-id}}"
					},
					{
						"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
						"key": "x-idempotency-key",
						"value": "{{x-idempotency-key}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/otpconfirmation",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otpconfirmation"
					],
					"variable": [
						{
							"key": "version",
							"value": "{{version}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Created",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"processResult\": {\n    \"responseCode\": \"99\",\n    \"rejectReasonList\": [\n      {\n        \"rejectReasonCode\": \"au\",\n        \"rejectReasonInfomation\": \"et exercitation ad ul\"\n      },\n      {\n        \"rejectReasonCode\": \"eni\",\n        \"rejectReasonInfomation\": \"ea\"\n      }\n    ]\n  },\n  \"mandateIdentification\": \"ea aute\",\n  \"creditorReference\": \"ex cupidatat proident\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Authorisation failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Authentication failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Method Not Allowed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Acceptable",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Media Not Supported",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unsupported Media Type",
					"code": 415,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"otpIdentificationNumber\": \"{{otpIdentificationNumber}}\",\n    \"otpPassword\": \"{{otpPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otpconfirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otpconfirmation"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				}
			]
		},
		{
			"name": "direct-debit-Instructions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" ",
							"// ********RoostGPT********",
							"/*",
							"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
							"",
							"",
							"Test generated for /instructions for http method type post in postman framework",
							"",
							"*/",
							"",
							"// ********RoostGPT********",
							"",
							"let responseData;",
							"const contentType = pm.response.headers.get('Content-Type');",
							"if(contentType === \"application/xml\"){",
							"    responseData = xml2Json(responseBody);",
							"} else{",
							"    responseData = pm.response.json();",
							"}",
							"if (pm.variables.get(\"statusCode\")) {",
							"  // Compare the statusCode variable with the response code for assertion",
							"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
							"}",
							"",
							"// let responseTime = 800",
							"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
							"",
							"if (pm.response.code == 201){",
							"    pm.test(\"Created\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `paymentInformationStatus` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`paymentInformationStatus`)){",
							"          if(pm.expect(_.get(responseData[0], `paymentInformationStatus`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `paymentInformationStatus`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `paymentInformationStatus` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`paymentInformationStatus`)){",
							"          if(pm.expect(_.get(pm.response.json(), `paymentInformationStatus`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `paymentInformationStatus`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							" ",
							"        pm.test('paymentInformationStatus to be one of enum', function(){ ",
							"          pm.expect(_.get(responseData, \"paymentInformationStatus\", \"\")).to.include.oneOf([\"ACSC\",\"RJCT\",\"ACCP\",\"ACSP\"]);",
							"        })",
							"  ",
							"        pm.test('paymentInformationStatus length to be atmost `4`',function(){",
							"          pm.expect(_.get(responseData, \"paymentInformationStatus\", \"\").length).to.be.at.most(4);",
							"        })",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							" ",
							"        pm.test('processResult.responseCode to be one of enum', function(){ ",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\")).to.include.oneOf([\"00\",\"99\"]);",
							"        })",
							"  ",
							"        pm.test('processResult.responseCode length to be atmost `4`',function(){",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\").length).to.be.at.most(4);",
							"        })",
							"",
							"        pm.test('Response has the `processResult.rejectReasonList` field', function () {",
							"            pm.expect(pm.response.json().processResult).to.have.property('rejectReasonList');",
							"        });",
							"",
							"    pm.test(`Each object in the processResult.rejectReasonList field has all the required fields`, function () {",
							"    pm.expect(pm.response.json()).to.have.nested.property(`processResult.rejectReasonList`);",
							"    let rejectReasonList = _.get(pm.response.json(), `processResult.rejectReasonList`, null);",
							"    if (rejectReasonList !== null) {",
							"        for (let rejectReasonList_it = 0; rejectReasonList_it < rejectReasonList.length; rejectReasonList_it++) {",
							"            let iterator = rejectReasonList_it;",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonCode' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonCode !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonCode length to be at most 10`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode.length).to.be.at.most(10);",
							"                });",
							"            }",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonInfomation' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonInfomation !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonInfomation length to be at most 105`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation.length).to.be.at.most(105);",
							"                });",
							"            }",
							"        }",
							"    }",
							"});",
							"",
							"          ",
							"",
							"",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `transactionIdentification` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`transactionIdentification`)){",
							"          if(pm.expect(_.get(responseData[0], `transactionIdentification`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `transactionIdentification`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `transactionIdentification` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`transactionIdentification`)){",
							"          if(pm.expect(_.get(pm.response.json(), `transactionIdentification`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `transactionIdentification`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('transactionIdentification length to be atmost `35`',function(){",
							"          pm.expect(_.get(responseData, \"transactionIdentification\", \"\").length).to.be.at.most(35);",
							"        })",
							"});",
							"}",
							"",
							"if (pm.response.code == 400){",
							"    pm.test(\"Bad Request\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 401){",
							"    pm.test(\"Authorisation failure\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 403){",
							"    pm.test(\"Authentication failure\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 404){",
							"    pm.test(\"Not Found\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Found\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 405){",
							"    pm.test(\"Method Not Allowed\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 406){",
							"    pm.test(\"Not Acceptable\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 415){",
							"    pm.test(\"Media Not Supported\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 500){",
							"    pm.test(\"Internal Server Error\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
						"key": "x-fapi-customer-ip-address",
						"value": "{{x-fapi-customer-ip-address}}"
					},
					{
						"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
						"key": "x-fapi-auth-date",
						"value": "{{x-fapi-auth-date}}"
					},
					{
						"description": "An RFC4122 UID used as a correlation id.",
						"key": "x-fapi-interaction-id",
						"value": "{{x-fapi-interaction-id}}"
					},
					{
						"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
						"key": "x-idempotency-key",
						"value": "{{x-idempotency-key}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/instructions",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"instructions"
					],
					"variable": [
						{
							"key": "version",
							"value": "{{version}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Created",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"paymentInformationStatus\": \"ACSC\",\n  \"processResult\": {\n    \"responseCode\": \"00\",\n    \"rejectReasonList\": [\n      {\n        \"rejectReasonCode\": \"non eiusm\",\n        \"rejectReasonInfomation\": \"rep\"\n      },\n      {\n        \"rejectReasonCode\": \"dol\",\n        \"rejectReasonInfomation\": \"ad est\"\n      }\n    ]\n  },\n  \"transactionIdentification\": \"ipsum dolore magna nulla\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Authorisation failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Authentication failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Method Not Allowed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Acceptable",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Media Not Supported",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unsupported Media Type",
					"code": 415,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantInstructionIdentification\": \"{{merchantInstructionIdentification}}\",\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"instructedAmount\": \"{{instructedAmount}}\",\n    \"instructedAmountCurrency\": \"{{instructedAmountCurrency}}\",\n    \"mandateIdentification\": \"{{mandateIdentification}}\",\n    \"debtorName\": \"{{debtorName}}\",\n    \"debtorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"creditorReference\": \"{{creditorReference}}\",\n    \"remittanceInformation\": \"{{remittanceInformation}}\",\n    \"smsLanguageCode\": \"{{smsLanguageCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/instructions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"instructions"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				}
			]
		},
		{
			"name": "postreports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" ",
							"// ********RoostGPT********",
							"/*",
							"Test generated by RoostGPT for test openbanking-api-postman using AI Type Azure Open AI and AI Model roostgpt-4-32k",
							"",
							"",
							"Test generated for /reports for http method type post in postman framework",
							"",
							"*/",
							"",
							"// ********RoostGPT********",
							"",
							"let responseData;",
							"const contentType = pm.response.headers.get('Content-Type');",
							"if(contentType === \"application/xml\"){",
							"    responseData = xml2Json(responseBody);",
							"} else{",
							"    responseData = pm.response.json();",
							"}",
							"if (pm.variables.get(\"statusCode\")) {",
							"  // Compare the statusCode variable with the response code for assertion",
							"  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);",
							"}",
							"",
							"// let responseTime = 800",
							"// pm.expect(pm.response.responseTime).to.be.below(responseTime);",
							"",
							"if (pm.response.code == 201){",
							"    pm.test(\"Created\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Created\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult`, null)).to.equal(\"object\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(responseData[0], `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `processResult.responseCode` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`processResult.responseCode`)){",
							"          if(pm.expect(_.get(pm.response.json(), `processResult.responseCode`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `processResult.responseCode`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							" ",
							"        pm.test('processResult.responseCode to be one of enum', function(){ ",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\")).to.include.oneOf([\"00\",\"99\"]);",
							"        })",
							"  ",
							"        pm.test('processResult.responseCode length to be atmost `4`',function(){",
							"          pm.expect(_.get(responseData, \"processResult.responseCode\", \"\").length).to.be.at.most(4);",
							"        })",
							"",
							"                pm.test('Response has the `processResult.rejectReasonList` field', function () {",
							"            pm.expect(pm.response.json().processResult).to.have.property('rejectReasonList');",
							"        });",
							"",
							"    pm.test(`Each object in the processResult.rejectReasonList field has all the required fields`, function () {",
							"    pm.expect(pm.response.json()).to.have.nested.property(`processResult.rejectReasonList`);",
							"    let rejectReasonList = _.get(pm.response.json(), `processResult.rejectReasonList`, null);",
							"    if (rejectReasonList !== null) {",
							"        for (let rejectReasonList_it = 0; rejectReasonList_it < rejectReasonList.length; rejectReasonList_it++) {",
							"            let iterator = rejectReasonList_it;",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonCode' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonCode !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonCode length to be at most 10`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonCode.length).to.be.at.most(10);",
							"                });",
							"            }",
							"",
							"            pm.test(`${iterator} element of array 'processResult.rejectReasonList' has 'rejectReasonInfomation' as 'string'`, function () {",
							"                pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation).to.be.a('string');",
							"            });",
							"",
							"            if (rejectReasonList[rejectReasonList_it].rejectReasonInfomation !== null) {",
							"                pm.test(`processResult.rejectReasonList[${rejectReasonList_it}].rejectReasonInfomation length to be at most 105`, function () {",
							"                    pm.expect(rejectReasonList[rejectReasonList_it].rejectReasonInfomation.length).to.be.at.most(105);",
							"                });",
							"            }",
							"        }",
							"    }",
							"});",
							"",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `reportContent` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`reportContent`)){",
							"          if(pm.expect(_.get(responseData[0], `reportContent`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `reportContent`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `reportContent` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`reportContent`)){",
							"          if(pm.expect(_.get(pm.response.json(), `reportContent`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `reportContent`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"});",
							"}",
							"",
							"if (pm.response.code == 400){",
							"    pm.test(\"Bad Request\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 401){",
							"    pm.test(\"Unauthorized\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 403){",
							"    pm.test(\"Forbidden\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 404){",
							"    pm.test(\"Not Found\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Found\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 405){",
							"    pm.test(\"Method Not Allowed\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 406){",
							"    pm.test(\"Not Acceptable\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 415){",
							"    pm.test(\"Unsupported Media Type\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							"",
							"if (pm.response.code == 500){",
							"    pm.test(\"Internal Server Error\", function () {",
							"      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");",
							"    if(Array.isArray(responseData)) {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    } else {",
							"      pm.test('Response has the `id` field',function(){",
							"        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){",
							"          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");",
							"          }",
							"        }",
							"",
							"      })",
							"    }",
							"  ",
							"        pm.test('id length to be atmost `40`',function(){",
							"          pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.most(40);",
							"        })",
							"  ",
							"        pm.test('id length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"id\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"        if(Array.isArray(responseData)){",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(responseData[0]).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(responseData[0], `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(responseData[0], `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        } else {",
							"          pm.test('Response has the `errors` field',function(){",
							"            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){",
							"              if(pm.expect(_.get(pm.response.json(), `errors`)).to.exist){",
							"                pm.expect(Array.isArray(_.get(pm.response.json(), `errors`))).to.equal(true);",
							"              }",
							"            }",
							"",
							"          })",
							"        }      ",
							"          ",
							"  ",
							"        pm.test('errors length to be alteast `1`',function(){",
							"          pm.expect(_.get(responseData, \"errors\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      pm.test(`Each object in the errors field has all the required fields`,function(){",
							"          pm.expect(pm.response.json()).to.have.nested.property(`errors`);",
							"          let errorsArray = _.get(pm.response.json(), `errors`, \"\");",
							"          for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {",
							"            let iterator = errors_it;",
							"            \t",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'code' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].code' has 'code' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].code`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].code`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'causes' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].causes' has 'causes' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].causes`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].causes`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].causes length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].causes\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'extendedDetails' as 'object'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails' has 'extendedDetails' as 'object'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails`, null)).to.equal(\"object\");",
							"          }",
							"      })",
							"",
							"    }",
							"",
							"      if(Array.isArray(responseData)) {",
							"        pm.test(`${iterator} element of array 'errorsArray' has 'path' as 'string'`,function(){  ",
							"          if(pm.expect(_.get(responseData[0], `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(responseData[0],`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"        })",
							"",
							"      } else {      ",
							"        pm.test(`${iterator} element of array 'errors[${errors_it}].extendedDetails.path' has 'path' as 'string'`,function(){ ",
							"          if(pm.expect(_.get(pm.response.json(), `errors[${errors_it}].extendedDetails.path`, null)).to.exist){",
							"            pm.expect(typeof _.get(pm.response.json(),`errors[${errors_it}].extendedDetails.path`, null)).to.equal(\"string\");",
							"          }",
							"      })",
							"",
							"    }",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be atmost `500`',function(){",
							"          pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.most(500);",
							"        })",
							"  ",
							"        pm.test('errors[${errors_it}].extendedDetails.path length to be alteast `1`',function(){",
							"            pm.expect(_.get(responseData, \"errors[${errors_it}].extendedDetails.path\", \"\").length).to.be.at.least(1);",
							"        })",
							"",
							"          }",
							"",
							"      })",
							"});",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
						"key": "x-fapi-customer-ip-address",
						"value": "{{x-fapi-customer-ip-address}}"
					},
					{
						"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
						"key": "x-fapi-auth-date",
						"value": "{{x-fapi-auth-date}}"
					},
					{
						"description": "An RFC4122 UID used as a correlation id.",
						"key": "x-fapi-interaction-id",
						"value": "{{x-fapi-interaction-id}}"
					},
					{
						"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
						"key": "x-idempotency-key",
						"value": "{{x-idempotency-key}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reports"
					],
					"variable": [
						{
							"key": "version",
							"value": "{{version}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Created",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"processResult\": {\n    \"responseCode\": \"00\",\n    \"rejectReasonList\": [\n      {\n        \"rejectReasonCode\": \"cupidatat \",\n        \"rejectReasonInfomation\": \"eiusmod exercitation elit ad\"\n      },\n      {\n        \"rejectReasonCode\": \"ex anim\",\n        \"rejectReasonInfomation\": \"reprehenderit\"\n      }\n    ]\n  },\n  \"reportContent\": \"nisi Lorem veniam irure\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Unauthorized",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Method Not Allowed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Not Acceptable",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Unsupported Media Type",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Unsupported Media Type",
					"code": 415,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: bearer",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "(Required) Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
								"key": "x-fapi-customer-ip-address",
								"value": "{{x-fapi-customer-ip-address}}"
							},
							{
								"description": "The time when the PSU last logged in with the TPP. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$'",
								"key": "x-fapi-auth-date",
								"value": "{{x-fapi-auth-date}}"
							},
							{
								"description": "An RFC4122 UID used as a correlation id.",
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"description": "(Required) Every request will be processed only once per x-idempotency-key.  The\nIdempotency Key will be valid for 24 hours.\n",
								"key": "x-idempotency-key",
								"value": "{{x-idempotency-key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"bankCode\": \"{{bankCode}}\",\n        \"accountIdentification\": \"{{accountIdentification}}\",\n        \"currency\": \"{{currency}}\",\n        \"accountSchemeName\": \"{{accountSchemeName}}\",\n        \"accountSubType\": \"{{accountSubType}}\"\n    },\n    \"reportType\": \"{{reportType}}\",\n    \"reportingDate\": \"{{reportingDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"variable": [
								{
									"key": "version",
									"value": "{{version}}"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"errors\": [\n    {\n      \"code\": \"ad laboris cillum\",\n      \"causes\": \"deserunt\",\n      \"extendedDetails\": {\n        \"path\": \"occaecat esse proident\"\n      }\n    }\n  ],\n  \"id\": \"magna esse\"\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "version",
			"value": "v1.0",
			"type": "any"
		},
		{
			"key": "baseUrl",
			"value": "https://sandbox.ob.business.hsbc.com.hk/mock/open-banking/v1.0/direct-debit",
			"type": "string"
		},
		{
			"key": "statusCode",
			"value": 200,
			"type": "integer"
		}
	]
}