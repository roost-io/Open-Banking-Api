# ********RoostGPT********

# Test generated by RoostGPT for test OpenBanking-Postman using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /status/authorisations_post for http method type POST 
# RoostTestHash=cdb7eed132
# 
# 

# ********RoostGPT********
Feature: Test /status/authorisations Endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase

  @Authorize
  Scenario Outline: Authorized User Test for POST operation
    Given path '/status/authorisations'
    And headers {'Authorization': '#(authheader)', 'x-fapi-customer-ip-address': '#(customerip)', 'x-fapi-auth-date': '#(authdate)', 'x-fapi-interaction-id': '#(interactionid)', 'x-idempotency-key': '#(idempotencykey)'}
    And request '''
    {
      "merchantRequestIdentification": "<merchantRequestIdentification>",
      "creditorAccount": {
        "bankCode": "<bankCode>",
        "accountIdentification": "<accountIdentification>",
        "currency": "<currency>",
        "accountSchemeName": "<accountSchemeName>",
        "accountSubType": "<accountSubType>"
      }
    }
    '''
    When method post
    Then status 201
    And match response contains { processResult: '#object', mandateIdentification: '#string', mandateStatus: '#string' }

    Examples:
      | authheader                           | customerip    | authdate                        | interactionid                          | idempotencykey     | merchantRequestIdentification | bankCode | accountIdentification | currency | accountSchemeName | accountSubType    |
      | 'Bearer LbGDbcFVVfE-ngpjj8KaH5wrEfg' | '192.168.1.1' | 'Sun, 10 Sep 2017 19:43:31 UTC' | '01234567-89ab-cdef-0123-456789abcdef' | 'LbGpjj8KaH5wrEfg' | 'TestMerchant1'               | '123'    | 'ACCOUNT123'          | 'USD'    | 'BBAN'            | 'Current Account' |

  @Unauthorize
  Scenario Outline: UnAuthorized User Test for POST operation
    Given path '/status/authorisations'
    And headers { 'Authorization': '#(unAuthHeader)', 'x-fapi-customer-ip-address': '#(customerip)', 'x-fapi-auth-date': '#(authdate)', 'x-fapi-interaction-id': '#(interactionid)', 'x-idempotency-key': '#(idempotencykey)' }
    And request '''
    {
      "merchantRequestIdentification": "<merchantRequestIdentification>",
      "creditorAccount": {
        "bankCode": "<bankCode>",
        "accountIdentification": "<accountIdentification>",
        "currency": "<currency>",
        "accountSchemeName": "<accountSchemeName>",
        "accountSubType": "<accountSubType>"
      }
    }
    '''
    When method post
    Then status 401

  Examples:
    | unAuthHeader           | customerip    | authdate                        | interactionid                          | idempotencykey     | merchantRequestIdentification | bankCode | accountIdentification | currency | accountSchemeName | accountSubType    |
    | 'Invalid Bearer Token' | '192.168.1.1' | 'Sun, 10 Sep 2017 19:43:31 UTC' | '01234567-89ab-cdef-0123-456789abcdef' | 'LbGpjj8KaH5wrEfg' | 'TestMerchant1'               | '123'    | 'ACCOUNT123'          | 'USD'    | 'BBAN'            | 'Current Account' |

  @Unauthorize
  Scenario: Test for Invalid Url
    Given url 'http://invalidbaseurl.com'
    And path '/status/authorisations'
    When method post
    Then status 404
